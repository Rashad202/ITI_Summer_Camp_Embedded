
LED_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000022dc  00002350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000fc0  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000878  00000000  00000000  00003318  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00003b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00003cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00003e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00005a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00006974  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00007b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000082df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 45 11 	jmp	0x228a	; 0x228a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include <util/delay.h>
#include "Std_Types.h"
#include "Bit_Math.h"

int main()
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c1 5b       	subi	r28, 0xB1	; 177
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0xff;
     b50:	ea e3       	ldi	r30, 0x3A	; 58
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	80 83       	st	Z, r24
    DDRB = 0x00;
     b58:	e7 e3       	ldi	r30, 0x37	; 55
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	10 82       	st	Z, r1
    PORTB = 0x00000111;
     b5e:	e8 e3       	ldi	r30, 0x38	; 56
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	81 e1       	ldi	r24, 0x11	; 17
     b64:	80 83       	st	Z, r24
    while (1)
    {

        //Flashing every 500 ms

        if (GET_BIT(PINB, 0) == 0 && GET_BIT(PINB, 1) == 0 && GET_BIT(PINB, 2) == 0)
     b66:	e6 e3       	ldi	r30, 0x36	; 54
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	88 2f       	mov	r24, r24
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	81 70       	andi	r24, 0x01	; 1
     b72:	90 70       	andi	r25, 0x00	; 0
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	09 f0       	breq	.+2      	; 0xb7a <main+0x44>
     b78:	85 c1       	rjmp	.+778    	; 0xe84 <main+0x34e>
     b7a:	e6 e3       	ldi	r30, 0x36	; 54
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	86 95       	lsr	r24
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	81 70       	andi	r24, 0x01	; 1
     b88:	90 70       	andi	r25, 0x00	; 0
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	09 f0       	breq	.+2      	; 0xb90 <main+0x5a>
     b8e:	7a c1       	rjmp	.+756    	; 0xe84 <main+0x34e>
     b90:	e6 e3       	ldi	r30, 0x36	; 54
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	86 95       	lsr	r24
     b98:	86 95       	lsr	r24
     b9a:	88 2f       	mov	r24, r24
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	81 70       	andi	r24, 0x01	; 1
     ba0:	90 70       	andi	r25, 0x00	; 0
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	09 f0       	breq	.+2      	; 0xba8 <main+0x72>
     ba6:	6e c1       	rjmp	.+732    	; 0xe84 <main+0x34e>
        {
            PORTA = 0xff;
     ba8:	eb e3       	ldi	r30, 0x3B	; 59
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	80 83       	st	Z, r24
     bb0:	fe 01       	movw	r30, r28
     bb2:	eb 55       	subi	r30, 0x5B	; 91
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	aa ef       	ldi	r26, 0xFA	; 250
     bbc:	b3 e4       	ldi	r27, 0x43	; 67
     bbe:	80 83       	st	Z, r24
     bc0:	91 83       	std	Z+1, r25	; 0x01
     bc2:	a2 83       	std	Z+2, r26	; 0x02
     bc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc6:	8e 01       	movw	r16, r28
     bc8:	0f 55       	subi	r16, 0x5F	; 95
     bca:	1f 4f       	sbci	r17, 0xFF	; 255
     bcc:	fe 01       	movw	r30, r28
     bce:	eb 55       	subi	r30, 0x5B	; 91
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	60 81       	ld	r22, Z
     bd4:	71 81       	ldd	r23, Z+1	; 0x01
     bd6:	82 81       	ldd	r24, Z+2	; 0x02
     bd8:	93 81       	ldd	r25, Z+3	; 0x03
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	4a e7       	ldi	r20, 0x7A	; 122
     be0:	53 e4       	ldi	r21, 0x43	; 67
     be2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	f8 01       	movw	r30, r16
     bec:	80 83       	st	Z, r24
     bee:	91 83       	std	Z+1, r25	; 0x01
     bf0:	a2 83       	std	Z+2, r26	; 0x02
     bf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bf4:	fe 01       	movw	r30, r28
     bf6:	ef 55       	subi	r30, 0x5F	; 95
     bf8:	ff 4f       	sbci	r31, 0xFF	; 255
     bfa:	60 81       	ld	r22, Z
     bfc:	71 81       	ldd	r23, Z+1	; 0x01
     bfe:	82 81       	ldd	r24, Z+2	; 0x02
     c00:	93 81       	ldd	r25, Z+3	; 0x03
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e8       	ldi	r20, 0x80	; 128
     c08:	5f e3       	ldi	r21, 0x3F	; 63
     c0a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c0e:	88 23       	and	r24, r24
     c10:	44 f4       	brge	.+16     	; 0xc22 <main+0xec>
		__ticks = 1;
     c12:	fe 01       	movw	r30, r28
     c14:	e1 56       	subi	r30, 0x61	; 97
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	91 83       	std	Z+1, r25	; 0x01
     c1e:	80 83       	st	Z, r24
     c20:	64 c0       	rjmp	.+200    	; 0xcea <main+0x1b4>
	else if (__tmp > 65535)
     c22:	fe 01       	movw	r30, r28
     c24:	ef 55       	subi	r30, 0x5F	; 95
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	60 81       	ld	r22, Z
     c2a:	71 81       	ldd	r23, Z+1	; 0x01
     c2c:	82 81       	ldd	r24, Z+2	; 0x02
     c2e:	93 81       	ldd	r25, Z+3	; 0x03
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	3f ef       	ldi	r19, 0xFF	; 255
     c34:	4f e7       	ldi	r20, 0x7F	; 127
     c36:	57 e4       	ldi	r21, 0x47	; 71
     c38:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c3c:	18 16       	cp	r1, r24
     c3e:	0c f0       	brlt	.+2      	; 0xc42 <main+0x10c>
     c40:	43 c0       	rjmp	.+134    	; 0xcc8 <main+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c42:	fe 01       	movw	r30, r28
     c44:	eb 55       	subi	r30, 0x5B	; 91
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	60 81       	ld	r22, Z
     c4a:	71 81       	ldd	r23, Z+1	; 0x01
     c4c:	82 81       	ldd	r24, Z+2	; 0x02
     c4e:	93 81       	ldd	r25, Z+3	; 0x03
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e2       	ldi	r20, 0x20	; 32
     c56:	51 e4       	ldi	r21, 0x41	; 65
     c58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	8e 01       	movw	r16, r28
     c62:	01 56       	subi	r16, 0x61	; 97
     c64:	1f 4f       	sbci	r17, 0xFF	; 255
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	f8 01       	movw	r30, r16
     c74:	91 83       	std	Z+1, r25	; 0x01
     c76:	80 83       	st	Z, r24
     c78:	1f c0       	rjmp	.+62     	; 0xcb8 <main+0x182>
     c7a:	fe 01       	movw	r30, r28
     c7c:	e3 56       	subi	r30, 0x63	; 99
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	89 e1       	ldi	r24, 0x19	; 25
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	91 83       	std	Z+1, r25	; 0x01
     c86:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c88:	fe 01       	movw	r30, r28
     c8a:	e3 56       	subi	r30, 0x63	; 99
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	80 81       	ld	r24, Z
     c90:	91 81       	ldd	r25, Z+1	; 0x01
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <main+0x15c>
     c96:	fe 01       	movw	r30, r28
     c98:	e3 56       	subi	r30, 0x63	; 99
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca0:	de 01       	movw	r26, r28
     ca2:	a1 56       	subi	r26, 0x61	; 97
     ca4:	bf 4f       	sbci	r27, 0xFF	; 255
     ca6:	fe 01       	movw	r30, r28
     ca8:	e1 56       	subi	r30, 0x61	; 97
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	11 96       	adiw	r26, 0x01	; 1
     cb4:	9c 93       	st	X, r25
     cb6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb8:	fe 01       	movw	r30, r28
     cba:	e1 56       	subi	r30, 0x61	; 97
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	d1 f6       	brne	.-76     	; 0xc7a <main+0x144>
     cc6:	27 c0       	rjmp	.+78     	; 0xd16 <main+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc8:	8e 01       	movw	r16, r28
     cca:	01 56       	subi	r16, 0x61	; 97
     ccc:	1f 4f       	sbci	r17, 0xFF	; 255
     cce:	fe 01       	movw	r30, r28
     cd0:	ef 55       	subi	r30, 0x5F	; 95
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	60 81       	ld	r22, Z
     cd6:	71 81       	ldd	r23, Z+1	; 0x01
     cd8:	82 81       	ldd	r24, Z+2	; 0x02
     cda:	93 81       	ldd	r25, Z+3	; 0x03
     cdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	f8 01       	movw	r30, r16
     ce6:	91 83       	std	Z+1, r25	; 0x01
     ce8:	80 83       	st	Z, r24
     cea:	de 01       	movw	r26, r28
     cec:	a5 56       	subi	r26, 0x65	; 101
     cee:	bf 4f       	sbci	r27, 0xFF	; 255
     cf0:	fe 01       	movw	r30, r28
     cf2:	e1 56       	subi	r30, 0x61	; 97
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	80 81       	ld	r24, Z
     cf8:	91 81       	ldd	r25, Z+1	; 0x01
     cfa:	8d 93       	st	X+, r24
     cfc:	9c 93       	st	X, r25
     cfe:	fe 01       	movw	r30, r28
     d00:	e5 56       	subi	r30, 0x65	; 101
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <main+0x1d2>
     d0c:	fe 01       	movw	r30, r28
     d0e:	e5 56       	subi	r30, 0x65	; 101
     d10:	ff 4f       	sbci	r31, 0xFF	; 255
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	80 83       	st	Z, r24
            _delay_ms(500);
            PORTA = 0x00;
     d16:	eb e3       	ldi	r30, 0x3B	; 59
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	10 82       	st	Z, r1
     d1c:	fe 01       	movw	r30, r28
     d1e:	e9 56       	subi	r30, 0x69	; 105
     d20:	ff 4f       	sbci	r31, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	aa ef       	ldi	r26, 0xFA	; 250
     d28:	b3 e4       	ldi	r27, 0x43	; 67
     d2a:	80 83       	st	Z, r24
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	a2 83       	std	Z+2, r26	; 0x02
     d30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d32:	8e 01       	movw	r16, r28
     d34:	0d 56       	subi	r16, 0x6D	; 109
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
     d38:	fe 01       	movw	r30, r28
     d3a:	e9 56       	subi	r30, 0x69	; 105
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	60 81       	ld	r22, Z
     d40:	71 81       	ldd	r23, Z+1	; 0x01
     d42:	82 81       	ldd	r24, Z+2	; 0x02
     d44:	93 81       	ldd	r25, Z+3	; 0x03
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	4a e7       	ldi	r20, 0x7A	; 122
     d4c:	53 e4       	ldi	r21, 0x43	; 67
     d4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	f8 01       	movw	r30, r16
     d58:	80 83       	st	Z, r24
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	a2 83       	std	Z+2, r26	; 0x02
     d5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d60:	fe 01       	movw	r30, r28
     d62:	ed 56       	subi	r30, 0x6D	; 109
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e8       	ldi	r20, 0x80	; 128
     d74:	5f e3       	ldi	r21, 0x3F	; 63
     d76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d7a:	88 23       	and	r24, r24
     d7c:	44 f4       	brge	.+16     	; 0xd8e <main+0x258>
		__ticks = 1;
     d7e:	fe 01       	movw	r30, r28
     d80:	ef 56       	subi	r30, 0x6F	; 111
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	80 83       	st	Z, r24
     d8c:	64 c0       	rjmp	.+200    	; 0xe56 <main+0x320>
	else if (__tmp > 65535)
     d8e:	fe 01       	movw	r30, r28
     d90:	ed 56       	subi	r30, 0x6D	; 109
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	60 81       	ld	r22, Z
     d96:	71 81       	ldd	r23, Z+1	; 0x01
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	3f ef       	ldi	r19, 0xFF	; 255
     da0:	4f e7       	ldi	r20, 0x7F	; 127
     da2:	57 e4       	ldi	r21, 0x47	; 71
     da4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     da8:	18 16       	cp	r1, r24
     daa:	0c f0       	brlt	.+2      	; 0xdae <main+0x278>
     dac:	43 c0       	rjmp	.+134    	; 0xe34 <main+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dae:	fe 01       	movw	r30, r28
     db0:	e9 56       	subi	r30, 0x69	; 105
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	60 81       	ld	r22, Z
     db6:	71 81       	ldd	r23, Z+1	; 0x01
     db8:	82 81       	ldd	r24, Z+2	; 0x02
     dba:	93 81       	ldd	r25, Z+3	; 0x03
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e2       	ldi	r20, 0x20	; 32
     dc2:	51 e4       	ldi	r21, 0x41	; 65
     dc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	8e 01       	movw	r16, r28
     dce:	0f 56       	subi	r16, 0x6F	; 111
     dd0:	1f 4f       	sbci	r17, 0xFF	; 255
     dd2:	bc 01       	movw	r22, r24
     dd4:	cd 01       	movw	r24, r26
     dd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	f8 01       	movw	r30, r16
     de0:	91 83       	std	Z+1, r25	; 0x01
     de2:	80 83       	st	Z, r24
     de4:	1f c0       	rjmp	.+62     	; 0xe24 <main+0x2ee>
     de6:	fe 01       	movw	r30, r28
     de8:	e1 57       	subi	r30, 0x71	; 113
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	89 e1       	ldi	r24, 0x19	; 25
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	80 83       	st	Z, r24
     df4:	fe 01       	movw	r30, r28
     df6:	e1 57       	subi	r30, 0x71	; 113
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	80 81       	ld	r24, Z
     dfc:	91 81       	ldd	r25, Z+1	; 0x01
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <main+0x2c8>
     e02:	fe 01       	movw	r30, r28
     e04:	e1 57       	subi	r30, 0x71	; 113
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0c:	de 01       	movw	r26, r28
     e0e:	af 56       	subi	r26, 0x6F	; 111
     e10:	bf 4f       	sbci	r27, 0xFF	; 255
     e12:	fe 01       	movw	r30, r28
     e14:	ef 56       	subi	r30, 0x6F	; 111
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	9c 93       	st	X, r25
     e22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e24:	fe 01       	movw	r30, r28
     e26:	ef 56       	subi	r30, 0x6F	; 111
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	d1 f6       	brne	.-76     	; 0xde6 <main+0x2b0>
     e32:	28 c0       	rjmp	.+80     	; 0xe84 <main+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e34:	8e 01       	movw	r16, r28
     e36:	0f 56       	subi	r16, 0x6F	; 111
     e38:	1f 4f       	sbci	r17, 0xFF	; 255
     e3a:	fe 01       	movw	r30, r28
     e3c:	ed 56       	subi	r30, 0x6D	; 109
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	60 81       	ld	r22, Z
     e42:	71 81       	ldd	r23, Z+1	; 0x01
     e44:	82 81       	ldd	r24, Z+2	; 0x02
     e46:	93 81       	ldd	r25, Z+3	; 0x03
     e48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	f8 01       	movw	r30, r16
     e52:	91 83       	std	Z+1, r25	; 0x01
     e54:	80 83       	st	Z, r24
     e56:	de 01       	movw	r26, r28
     e58:	a3 57       	subi	r26, 0x73	; 115
     e5a:	bf 4f       	sbci	r27, 0xFF	; 255
     e5c:	fe 01       	movw	r30, r28
     e5e:	ef 56       	subi	r30, 0x6F	; 111
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	11 96       	adiw	r26, 0x01	; 1
     e68:	9c 93       	st	X, r25
     e6a:	8e 93       	st	-X, r24
     e6c:	fe 01       	movw	r30, r28
     e6e:	e3 57       	subi	r30, 0x73	; 115
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <main+0x340>
     e7a:	fe 01       	movw	r30, r28
     e7c:	e3 57       	subi	r30, 0x73	; 115
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24
            _delay_ms(500);
        }

        // Shifting Left every 250 ms

         if (GET_BIT(PINB, 0) == 0 && GET_BIT(PINB, 1) == 0 && GET_BIT(PINB, 2) == 1)
     e84:	e6 e3       	ldi	r30, 0x36	; 54
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	81 70       	andi	r24, 0x01	; 1
     e90:	90 70       	andi	r25, 0x00	; 0
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	09 f0       	breq	.+2      	; 0xe98 <main+0x362>
     e96:	10 c1       	rjmp	.+544    	; 0x10b8 <main+0x582>
     e98:	e6 e3       	ldi	r30, 0x36	; 54
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	86 95       	lsr	r24
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	81 70       	andi	r24, 0x01	; 1
     ea6:	90 70       	andi	r25, 0x00	; 0
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	09 f0       	breq	.+2      	; 0xeae <main+0x378>
     eac:	05 c1       	rjmp	.+522    	; 0x10b8 <main+0x582>
     eae:	e6 e3       	ldi	r30, 0x36	; 54
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	86 95       	lsr	r24
     eb6:	86 95       	lsr	r24
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	81 70       	andi	r24, 0x01	; 1
     ebe:	90 70       	andi	r25, 0x00	; 0
     ec0:	88 23       	and	r24, r24
     ec2:	09 f4       	brne	.+2      	; 0xec6 <main+0x390>
     ec4:	f9 c0       	rjmp	.+498    	; 0x10b8 <main+0x582>
        {
            for (s8 i = 7; i >= 0; i--)
     ec6:	fe 01       	movw	r30, r28
     ec8:	ef 54       	subi	r30, 0x4F	; 79
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	87 e0       	ldi	r24, 0x07	; 7
     ece:	80 83       	st	Z, r24
     ed0:	ec c0       	rjmp	.+472    	; 0x10aa <main+0x574>
            {
                SET_BIT(PORTA, i);
     ed2:	ab e3       	ldi	r26, 0x3B	; 59
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	eb e3       	ldi	r30, 0x3B	; 59
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	fe 01       	movw	r30, r28
     ee0:	ef 54       	subi	r30, 0x4F	; 79
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	80 81       	ld	r24, Z
     ee6:	28 2f       	mov	r18, r24
     ee8:	33 27       	eor	r19, r19
     eea:	27 fd       	sbrc	r18, 7
     eec:	30 95       	com	r19
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <main+0x3c2>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	2a 95       	dec	r18
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <main+0x3be>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	fe 01       	movw	r30, r28
     f02:	e7 57       	subi	r30, 0x77	; 119
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	aa e7       	ldi	r26, 0x7A	; 122
     f0c:	b3 e4       	ldi	r27, 0x43	; 67
     f0e:	80 83       	st	Z, r24
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	a2 83       	std	Z+2, r26	; 0x02
     f14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f16:	8e 01       	movw	r16, r28
     f18:	0b 57       	subi	r16, 0x7B	; 123
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	fe 01       	movw	r30, r28
     f1e:	e7 57       	subi	r30, 0x77	; 119
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	60 81       	ld	r22, Z
     f24:	71 81       	ldd	r23, Z+1	; 0x01
     f26:	82 81       	ldd	r24, Z+2	; 0x02
     f28:	93 81       	ldd	r25, Z+3	; 0x03
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	4a e7       	ldi	r20, 0x7A	; 122
     f30:	53 e4       	ldi	r21, 0x43	; 67
     f32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	f8 01       	movw	r30, r16
     f3c:	80 83       	st	Z, r24
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	a2 83       	std	Z+2, r26	; 0x02
     f42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f44:	fe 01       	movw	r30, r28
     f46:	eb 57       	subi	r30, 0x7B	; 123
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	60 81       	ld	r22, Z
     f4c:	71 81       	ldd	r23, Z+1	; 0x01
     f4e:	82 81       	ldd	r24, Z+2	; 0x02
     f50:	93 81       	ldd	r25, Z+3	; 0x03
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e8       	ldi	r20, 0x80	; 128
     f58:	5f e3       	ldi	r21, 0x3F	; 63
     f5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f5e:	88 23       	and	r24, r24
     f60:	44 f4       	brge	.+16     	; 0xf72 <main+0x43c>
		__ticks = 1;
     f62:	fe 01       	movw	r30, r28
     f64:	ed 57       	subi	r30, 0x7D	; 125
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	91 83       	std	Z+1, r25	; 0x01
     f6e:	80 83       	st	Z, r24
     f70:	64 c0       	rjmp	.+200    	; 0x103a <main+0x504>
	else if (__tmp > 65535)
     f72:	fe 01       	movw	r30, r28
     f74:	eb 57       	subi	r30, 0x7B	; 123
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	60 81       	ld	r22, Z
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	82 81       	ldd	r24, Z+2	; 0x02
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	4f e7       	ldi	r20, 0x7F	; 127
     f86:	57 e4       	ldi	r21, 0x47	; 71
     f88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f8c:	18 16       	cp	r1, r24
     f8e:	0c f0       	brlt	.+2      	; 0xf92 <main+0x45c>
     f90:	43 c0       	rjmp	.+134    	; 0x1018 <main+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f92:	fe 01       	movw	r30, r28
     f94:	e7 57       	subi	r30, 0x77	; 119
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	60 81       	ld	r22, Z
     f9a:	71 81       	ldd	r23, Z+1	; 0x01
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	93 81       	ldd	r25, Z+3	; 0x03
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e2       	ldi	r20, 0x20	; 32
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	8e 01       	movw	r16, r28
     fb2:	0d 57       	subi	r16, 0x7D	; 125
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	bc 01       	movw	r22, r24
     fb8:	cd 01       	movw	r24, r26
     fba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	f8 01       	movw	r30, r16
     fc4:	91 83       	std	Z+1, r25	; 0x01
     fc6:	80 83       	st	Z, r24
     fc8:	1f c0       	rjmp	.+62     	; 0x1008 <main+0x4d2>
     fca:	fe 01       	movw	r30, r28
     fcc:	ef 57       	subi	r30, 0x7F	; 127
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	89 e1       	ldi	r24, 0x19	; 25
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
     fd8:	fe 01       	movw	r30, r28
     fda:	ef 57       	subi	r30, 0x7F	; 127
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	80 81       	ld	r24, Z
     fe0:	91 81       	ldd	r25, Z+1	; 0x01
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <main+0x4ac>
     fe6:	fe 01       	movw	r30, r28
     fe8:	ef 57       	subi	r30, 0x7F	; 127
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	91 83       	std	Z+1, r25	; 0x01
     fee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff0:	de 01       	movw	r26, r28
     ff2:	ad 57       	subi	r26, 0x7D	; 125
     ff4:	bf 4f       	sbci	r27, 0xFF	; 255
     ff6:	fe 01       	movw	r30, r28
     ff8:	ed 57       	subi	r30, 0x7D	; 125
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	11 96       	adiw	r26, 0x01	; 1
    1004:	9c 93       	st	X, r25
    1006:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1008:	fe 01       	movw	r30, r28
    100a:	ed 57       	subi	r30, 0x7D	; 125
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	80 81       	ld	r24, Z
    1010:	91 81       	ldd	r25, Z+1	; 0x01
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	d1 f6       	brne	.-76     	; 0xfca <main+0x494>
    1016:	27 c0       	rjmp	.+78     	; 0x1066 <main+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1018:	8e 01       	movw	r16, r28
    101a:	0d 57       	subi	r16, 0x7D	; 125
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	fe 01       	movw	r30, r28
    1020:	eb 57       	subi	r30, 0x7B	; 123
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	f8 01       	movw	r30, r16
    1036:	91 83       	std	Z+1, r25	; 0x01
    1038:	80 83       	st	Z, r24
    103a:	de 01       	movw	r26, r28
    103c:	a1 58       	subi	r26, 0x81	; 129
    103e:	bf 4f       	sbci	r27, 0xFF	; 255
    1040:	fe 01       	movw	r30, r28
    1042:	ed 57       	subi	r30, 0x7D	; 125
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	8d 93       	st	X+, r24
    104c:	9c 93       	st	X, r25
    104e:	fe 01       	movw	r30, r28
    1050:	e1 58       	subi	r30, 0x81	; 129
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	f1 f7       	brne	.-4      	; 0x1058 <main+0x522>
    105c:	fe 01       	movw	r30, r28
    105e:	e1 58       	subi	r30, 0x81	; 129
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	80 83       	st	Z, r24
                _delay_ms(250);
                CLR_BIT(PORTA, i);
    1066:	ab e3       	ldi	r26, 0x3B	; 59
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	eb e3       	ldi	r30, 0x3B	; 59
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	fe 01       	movw	r30, r28
    1074:	ef 54       	subi	r30, 0x4F	; 79
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	80 81       	ld	r24, Z
    107a:	28 2f       	mov	r18, r24
    107c:	33 27       	eor	r19, r19
    107e:	27 fd       	sbrc	r18, 7
    1080:	30 95       	com	r19
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <main+0x558>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <main+0x554>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24

        // Shifting Left every 250 ms

         if (GET_BIT(PINB, 0) == 0 && GET_BIT(PINB, 1) == 0 && GET_BIT(PINB, 2) == 1)
        {
            for (s8 i = 7; i >= 0; i--)
    1098:	de 01       	movw	r26, r28
    109a:	af 54       	subi	r26, 0x4F	; 79
    109c:	bf 4f       	sbci	r27, 0xFF	; 255
    109e:	fe 01       	movw	r30, r28
    10a0:	ef 54       	subi	r30, 0x4F	; 79
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	80 81       	ld	r24, Z
    10a6:	81 50       	subi	r24, 0x01	; 1
    10a8:	8c 93       	st	X, r24
    10aa:	fe 01       	movw	r30, r28
    10ac:	ef 54       	subi	r30, 0x4F	; 79
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	80 81       	ld	r24, Z
    10b2:	88 23       	and	r24, r24
    10b4:	0c f0       	brlt	.+2      	; 0x10b8 <main+0x582>
    10b6:	0d cf       	rjmp	.-486    	; 0xed2 <main+0x39c>
            }
        }

        // Shifting Right every 250 ms

        if (GET_BIT(PINB, 0) == 0 && GET_BIT(PINB, 1) == 1 && GET_BIT(PINB, 2) == 0)
    10b8:	e6 e3       	ldi	r30, 0x36	; 54
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	81 70       	andi	r24, 0x01	; 1
    10c4:	90 70       	andi	r25, 0x00	; 0
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	09 f0       	breq	.+2      	; 0x10cc <main+0x596>
    10ca:	0f c1       	rjmp	.+542    	; 0x12ea <main+0x7b4>
    10cc:	e6 e3       	ldi	r30, 0x36	; 54
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	86 95       	lsr	r24
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	81 70       	andi	r24, 0x01	; 1
    10da:	90 70       	andi	r25, 0x00	; 0
    10dc:	88 23       	and	r24, r24
    10de:	09 f4       	brne	.+2      	; 0x10e2 <main+0x5ac>
    10e0:	04 c1       	rjmp	.+520    	; 0x12ea <main+0x7b4>
    10e2:	e6 e3       	ldi	r30, 0x36	; 54
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	86 95       	lsr	r24
    10ea:	86 95       	lsr	r24
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	81 70       	andi	r24, 0x01	; 1
    10f2:	90 70       	andi	r25, 0x00	; 0
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	09 f0       	breq	.+2      	; 0x10fa <main+0x5c4>
    10f8:	f8 c0       	rjmp	.+496    	; 0x12ea <main+0x7b4>
        {
            for (s8 i = 0; i <= 7; i++)
    10fa:	fe 01       	movw	r30, r28
    10fc:	e0 55       	subi	r30, 0x50	; 80
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	10 82       	st	Z, r1
    1102:	ec c0       	rjmp	.+472    	; 0x12dc <main+0x7a6>
            {
                SET_BIT(PORTA, i);
    1104:	ab e3       	ldi	r26, 0x3B	; 59
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	eb e3       	ldi	r30, 0x3B	; 59
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	fe 01       	movw	r30, r28
    1112:	e0 55       	subi	r30, 0x50	; 80
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	80 81       	ld	r24, Z
    1118:	28 2f       	mov	r18, r24
    111a:	33 27       	eor	r19, r19
    111c:	27 fd       	sbrc	r18, 7
    111e:	30 95       	com	r19
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 c0       	rjmp	.+4      	; 0x112a <main+0x5f4>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	2a 95       	dec	r18
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <main+0x5f0>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	fe 01       	movw	r30, r28
    1134:	e5 58       	subi	r30, 0x85	; 133
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	aa e7       	ldi	r26, 0x7A	; 122
    113e:	b3 e4       	ldi	r27, 0x43	; 67
    1140:	80 83       	st	Z, r24
    1142:	91 83       	std	Z+1, r25	; 0x01
    1144:	a2 83       	std	Z+2, r26	; 0x02
    1146:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1148:	8e 01       	movw	r16, r28
    114a:	09 58       	subi	r16, 0x89	; 137
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	fe 01       	movw	r30, r28
    1150:	e5 58       	subi	r30, 0x85	; 133
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	60 81       	ld	r22, Z
    1156:	71 81       	ldd	r23, Z+1	; 0x01
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	93 81       	ldd	r25, Z+3	; 0x03
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	4a e7       	ldi	r20, 0x7A	; 122
    1162:	53 e4       	ldi	r21, 0x43	; 67
    1164:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	f8 01       	movw	r30, r16
    116e:	80 83       	st	Z, r24
    1170:	91 83       	std	Z+1, r25	; 0x01
    1172:	a2 83       	std	Z+2, r26	; 0x02
    1174:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1176:	fe 01       	movw	r30, r28
    1178:	e9 58       	subi	r30, 0x89	; 137
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	60 81       	ld	r22, Z
    117e:	71 81       	ldd	r23, Z+1	; 0x01
    1180:	82 81       	ldd	r24, Z+2	; 0x02
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e8       	ldi	r20, 0x80	; 128
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1190:	88 23       	and	r24, r24
    1192:	44 f4       	brge	.+16     	; 0x11a4 <main+0x66e>
		__ticks = 1;
    1194:	fe 01       	movw	r30, r28
    1196:	eb 58       	subi	r30, 0x8B	; 139
    1198:	ff 4f       	sbci	r31, 0xFF	; 255
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	80 83       	st	Z, r24
    11a2:	64 c0       	rjmp	.+200    	; 0x126c <main+0x736>
	else if (__tmp > 65535)
    11a4:	fe 01       	movw	r30, r28
    11a6:	e9 58       	subi	r30, 0x89	; 137
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	60 81       	ld	r22, Z
    11ac:	71 81       	ldd	r23, Z+1	; 0x01
    11ae:	82 81       	ldd	r24, Z+2	; 0x02
    11b0:	93 81       	ldd	r25, Z+3	; 0x03
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	3f ef       	ldi	r19, 0xFF	; 255
    11b6:	4f e7       	ldi	r20, 0x7F	; 127
    11b8:	57 e4       	ldi	r21, 0x47	; 71
    11ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11be:	18 16       	cp	r1, r24
    11c0:	0c f0       	brlt	.+2      	; 0x11c4 <main+0x68e>
    11c2:	43 c0       	rjmp	.+134    	; 0x124a <main+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c4:	fe 01       	movw	r30, r28
    11c6:	e5 58       	subi	r30, 0x85	; 133
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	60 81       	ld	r22, Z
    11cc:	71 81       	ldd	r23, Z+1	; 0x01
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e2       	ldi	r20, 0x20	; 32
    11d8:	51 e4       	ldi	r21, 0x41	; 65
    11da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	8e 01       	movw	r16, r28
    11e4:	0b 58       	subi	r16, 0x8B	; 139
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	bc 01       	movw	r22, r24
    11ea:	cd 01       	movw	r24, r26
    11ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	f8 01       	movw	r30, r16
    11f6:	91 83       	std	Z+1, r25	; 0x01
    11f8:	80 83       	st	Z, r24
    11fa:	1f c0       	rjmp	.+62     	; 0x123a <main+0x704>
    11fc:	fe 01       	movw	r30, r28
    11fe:	ed 58       	subi	r30, 0x8D	; 141
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	89 e1       	ldi	r24, 0x19	; 25
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	91 83       	std	Z+1, r25	; 0x01
    1208:	80 83       	st	Z, r24
    120a:	fe 01       	movw	r30, r28
    120c:	ed 58       	subi	r30, 0x8D	; 141
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	80 81       	ld	r24, Z
    1212:	91 81       	ldd	r25, Z+1	; 0x01
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <main+0x6de>
    1218:	fe 01       	movw	r30, r28
    121a:	ed 58       	subi	r30, 0x8D	; 141
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1222:	de 01       	movw	r26, r28
    1224:	ab 58       	subi	r26, 0x8B	; 139
    1226:	bf 4f       	sbci	r27, 0xFF	; 255
    1228:	fe 01       	movw	r30, r28
    122a:	eb 58       	subi	r30, 0x8B	; 139
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	80 81       	ld	r24, Z
    1230:	91 81       	ldd	r25, Z+1	; 0x01
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	11 96       	adiw	r26, 0x01	; 1
    1236:	9c 93       	st	X, r25
    1238:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123a:	fe 01       	movw	r30, r28
    123c:	eb 58       	subi	r30, 0x8B	; 139
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	d1 f6       	brne	.-76     	; 0x11fc <main+0x6c6>
    1248:	27 c0       	rjmp	.+78     	; 0x1298 <main+0x762>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124a:	8e 01       	movw	r16, r28
    124c:	0b 58       	subi	r16, 0x8B	; 139
    124e:	1f 4f       	sbci	r17, 0xFF	; 255
    1250:	fe 01       	movw	r30, r28
    1252:	e9 58       	subi	r30, 0x89	; 137
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	60 81       	ld	r22, Z
    1258:	71 81       	ldd	r23, Z+1	; 0x01
    125a:	82 81       	ldd	r24, Z+2	; 0x02
    125c:	93 81       	ldd	r25, Z+3	; 0x03
    125e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	f8 01       	movw	r30, r16
    1268:	91 83       	std	Z+1, r25	; 0x01
    126a:	80 83       	st	Z, r24
    126c:	de 01       	movw	r26, r28
    126e:	af 58       	subi	r26, 0x8F	; 143
    1270:	bf 4f       	sbci	r27, 0xFF	; 255
    1272:	fe 01       	movw	r30, r28
    1274:	eb 58       	subi	r30, 0x8B	; 139
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	80 81       	ld	r24, Z
    127a:	91 81       	ldd	r25, Z+1	; 0x01
    127c:	8d 93       	st	X+, r24
    127e:	9c 93       	st	X, r25
    1280:	fe 01       	movw	r30, r28
    1282:	ef 58       	subi	r30, 0x8F	; 143
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <main+0x754>
    128e:	fe 01       	movw	r30, r28
    1290:	ef 58       	subi	r30, 0x8F	; 143
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
                _delay_ms(250);
                CLR_BIT(PORTA, i);
    1298:	ab e3       	ldi	r26, 0x3B	; 59
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	eb e3       	ldi	r30, 0x3B	; 59
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	fe 01       	movw	r30, r28
    12a6:	e0 55       	subi	r30, 0x50	; 80
    12a8:	ff 4f       	sbci	r31, 0xFF	; 255
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	33 27       	eor	r19, r19
    12b0:	27 fd       	sbrc	r18, 7
    12b2:	30 95       	com	r19
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <main+0x78a>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <main+0x786>
    12c4:	80 95       	com	r24
    12c6:	84 23       	and	r24, r20
    12c8:	8c 93       	st	X, r24

        // Shifting Right every 250 ms

        if (GET_BIT(PINB, 0) == 0 && GET_BIT(PINB, 1) == 1 && GET_BIT(PINB, 2) == 0)
        {
            for (s8 i = 0; i <= 7; i++)
    12ca:	de 01       	movw	r26, r28
    12cc:	a0 55       	subi	r26, 0x50	; 80
    12ce:	bf 4f       	sbci	r27, 0xFF	; 255
    12d0:	fe 01       	movw	r30, r28
    12d2:	e0 55       	subi	r30, 0x50	; 80
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	80 81       	ld	r24, Z
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	8c 93       	st	X, r24
    12dc:	fe 01       	movw	r30, r28
    12de:	e0 55       	subi	r30, 0x50	; 80
    12e0:	ff 4f       	sbci	r31, 0xFF	; 255
    12e2:	80 81       	ld	r24, Z
    12e4:	88 30       	cpi	r24, 0x08	; 8
    12e6:	0c f4       	brge	.+2      	; 0x12ea <main+0x7b4>
    12e8:	0d cf       	rjmp	.-486    	; 0x1104 <main+0x5ce>
            }
        }

        // LEDs Converging every 300 ms

         if (GET_BIT(PINB, 0) == 0 && GET_BIT(PINB, 1) == 1 && GET_BIT(PINB, 2) == 1)
    12ea:	e6 e3       	ldi	r30, 0x36	; 54
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	90 70       	andi	r25, 0x00	; 0
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	09 f0       	breq	.+2      	; 0x12fe <main+0x7c8>
    12fc:	42 c1       	rjmp	.+644    	; 0x1582 <main+0xa4c>
    12fe:	e6 e3       	ldi	r30, 0x36	; 54
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	86 95       	lsr	r24
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	81 70       	andi	r24, 0x01	; 1
    130c:	90 70       	andi	r25, 0x00	; 0
    130e:	88 23       	and	r24, r24
    1310:	09 f4       	brne	.+2      	; 0x1314 <main+0x7de>
    1312:	37 c1       	rjmp	.+622    	; 0x1582 <main+0xa4c>
    1314:	e6 e3       	ldi	r30, 0x36	; 54
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	86 95       	lsr	r24
    131c:	86 95       	lsr	r24
    131e:	88 2f       	mov	r24, r24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	81 70       	andi	r24, 0x01	; 1
    1324:	90 70       	andi	r25, 0x00	; 0
    1326:	88 23       	and	r24, r24
    1328:	09 f4       	brne	.+2      	; 0x132c <main+0x7f6>
    132a:	2b c1       	rjmp	.+598    	; 0x1582 <main+0xa4c>
        {
            for (u8 i = 0; i <= 3; i++)
    132c:	fe 01       	movw	r30, r28
    132e:	e1 55       	subi	r30, 0x51	; 81
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	10 82       	st	Z, r1
    1334:	1f c1       	rjmp	.+574    	; 0x1574 <main+0xa3e>
            {
                SET_BIT(PORTA, i);
    1336:	ab e3       	ldi	r26, 0x3B	; 59
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	eb e3       	ldi	r30, 0x3B	; 59
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	fe 01       	movw	r30, r28
    1344:	e1 55       	subi	r30, 0x51	; 81
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 81       	ld	r24, Z
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <main+0x822>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	2a 95       	dec	r18
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <main+0x81e>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
                SET_BIT(PORTA, 7 - i);
    1360:	ab e3       	ldi	r26, 0x3B	; 59
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	eb e3       	ldi	r30, 0x3B	; 59
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	fe 01       	movw	r30, r28
    136e:	e1 55       	subi	r30, 0x51	; 81
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	80 81       	ld	r24, Z
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	87 e0       	ldi	r24, 0x07	; 7
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	bc 01       	movw	r22, r24
    137e:	62 1b       	sub	r22, r18
    1380:	73 0b       	sbc	r23, r19
    1382:	9b 01       	movw	r18, r22
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 c0       	rjmp	.+4      	; 0x138e <main+0x858>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	2a 95       	dec	r18
    1390:	e2 f7       	brpl	.-8      	; 0x138a <main+0x854>
    1392:	84 2b       	or	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	fe 01       	movw	r30, r28
    1398:	e3 59       	subi	r30, 0x93	; 147
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a6 e9       	ldi	r26, 0x96	; 150
    13a2:	b3 e4       	ldi	r27, 0x43	; 67
    13a4:	80 83       	st	Z, r24
    13a6:	91 83       	std	Z+1, r25	; 0x01
    13a8:	a2 83       	std	Z+2, r26	; 0x02
    13aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ac:	8e 01       	movw	r16, r28
    13ae:	07 59       	subi	r16, 0x97	; 151
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	fe 01       	movw	r30, r28
    13b4:	e3 59       	subi	r30, 0x93	; 147
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	60 81       	ld	r22, Z
    13ba:	71 81       	ldd	r23, Z+1	; 0x01
    13bc:	82 81       	ldd	r24, Z+2	; 0x02
    13be:	93 81       	ldd	r25, Z+3	; 0x03
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4a e7       	ldi	r20, 0x7A	; 122
    13c6:	53 e4       	ldi	r21, 0x43	; 67
    13c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	f8 01       	movw	r30, r16
    13d2:	80 83       	st	Z, r24
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	a2 83       	std	Z+2, r26	; 0x02
    13d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13da:	fe 01       	movw	r30, r28
    13dc:	e7 59       	subi	r30, 0x97	; 151
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	60 81       	ld	r22, Z
    13e2:	71 81       	ldd	r23, Z+1	; 0x01
    13e4:	82 81       	ldd	r24, Z+2	; 0x02
    13e6:	93 81       	ldd	r25, Z+3	; 0x03
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e8       	ldi	r20, 0x80	; 128
    13ee:	5f e3       	ldi	r21, 0x3F	; 63
    13f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13f4:	88 23       	and	r24, r24
    13f6:	44 f4       	brge	.+16     	; 0x1408 <main+0x8d2>
		__ticks = 1;
    13f8:	fe 01       	movw	r30, r28
    13fa:	e9 59       	subi	r30, 0x99	; 153
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	91 83       	std	Z+1, r25	; 0x01
    1404:	80 83       	st	Z, r24
    1406:	64 c0       	rjmp	.+200    	; 0x14d0 <main+0x99a>
	else if (__tmp > 65535)
    1408:	fe 01       	movw	r30, r28
    140a:	e7 59       	subi	r30, 0x97	; 151
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	60 81       	ld	r22, Z
    1410:	71 81       	ldd	r23, Z+1	; 0x01
    1412:	82 81       	ldd	r24, Z+2	; 0x02
    1414:	93 81       	ldd	r25, Z+3	; 0x03
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	3f ef       	ldi	r19, 0xFF	; 255
    141a:	4f e7       	ldi	r20, 0x7F	; 127
    141c:	57 e4       	ldi	r21, 0x47	; 71
    141e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1422:	18 16       	cp	r1, r24
    1424:	0c f0       	brlt	.+2      	; 0x1428 <main+0x8f2>
    1426:	43 c0       	rjmp	.+134    	; 0x14ae <main+0x978>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1428:	fe 01       	movw	r30, r28
    142a:	e3 59       	subi	r30, 0x93	; 147
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	60 81       	ld	r22, Z
    1430:	71 81       	ldd	r23, Z+1	; 0x01
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	51 e4       	ldi	r21, 0x41	; 65
    143e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	8e 01       	movw	r16, r28
    1448:	09 59       	subi	r16, 0x99	; 153
    144a:	1f 4f       	sbci	r17, 0xFF	; 255
    144c:	bc 01       	movw	r22, r24
    144e:	cd 01       	movw	r24, r26
    1450:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	f8 01       	movw	r30, r16
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	80 83       	st	Z, r24
    145e:	1f c0       	rjmp	.+62     	; 0x149e <main+0x968>
    1460:	fe 01       	movw	r30, r28
    1462:	eb 59       	subi	r30, 0x9B	; 155
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	89 e1       	ldi	r24, 0x19	; 25
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
    146e:	fe 01       	movw	r30, r28
    1470:	eb 59       	subi	r30, 0x9B	; 155
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	80 81       	ld	r24, Z
    1476:	91 81       	ldd	r25, Z+1	; 0x01
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <main+0x942>
    147c:	fe 01       	movw	r30, r28
    147e:	eb 59       	subi	r30, 0x9B	; 155
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1486:	de 01       	movw	r26, r28
    1488:	a9 59       	subi	r26, 0x99	; 153
    148a:	bf 4f       	sbci	r27, 0xFF	; 255
    148c:	fe 01       	movw	r30, r28
    148e:	e9 59       	subi	r30, 0x99	; 153
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	80 81       	ld	r24, Z
    1494:	91 81       	ldd	r25, Z+1	; 0x01
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	11 96       	adiw	r26, 0x01	; 1
    149a:	9c 93       	st	X, r25
    149c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149e:	fe 01       	movw	r30, r28
    14a0:	e9 59       	subi	r30, 0x99	; 153
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	91 81       	ldd	r25, Z+1	; 0x01
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	d1 f6       	brne	.-76     	; 0x1460 <main+0x92a>
    14ac:	27 c0       	rjmp	.+78     	; 0x14fc <main+0x9c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ae:	8e 01       	movw	r16, r28
    14b0:	09 59       	subi	r16, 0x99	; 153
    14b2:	1f 4f       	sbci	r17, 0xFF	; 255
    14b4:	fe 01       	movw	r30, r28
    14b6:	e7 59       	subi	r30, 0x97	; 151
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	60 81       	ld	r22, Z
    14bc:	71 81       	ldd	r23, Z+1	; 0x01
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	93 81       	ldd	r25, Z+3	; 0x03
    14c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	f8 01       	movw	r30, r16
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
    14d0:	de 01       	movw	r26, r28
    14d2:	ad 59       	subi	r26, 0x9D	; 157
    14d4:	bf 4f       	sbci	r27, 0xFF	; 255
    14d6:	fe 01       	movw	r30, r28
    14d8:	e9 59       	subi	r30, 0x99	; 153
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	80 81       	ld	r24, Z
    14de:	91 81       	ldd	r25, Z+1	; 0x01
    14e0:	8d 93       	st	X+, r24
    14e2:	9c 93       	st	X, r25
    14e4:	fe 01       	movw	r30, r28
    14e6:	ed 59       	subi	r30, 0x9D	; 157
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 81       	ld	r24, Z
    14ec:	91 81       	ldd	r25, Z+1	; 0x01
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <main+0x9b8>
    14f2:	fe 01       	movw	r30, r28
    14f4:	ed 59       	subi	r30, 0x9D	; 157
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	80 83       	st	Z, r24
                _delay_ms(300);
                CLR_BIT(PORTA, i);
    14fc:	ab e3       	ldi	r26, 0x3B	; 59
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	eb e3       	ldi	r30, 0x3B	; 59
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	fe 01       	movw	r30, r28
    150a:	e1 55       	subi	r30, 0x51	; 81
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	80 81       	ld	r24, Z
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 c0       	rjmp	.+4      	; 0x151e <main+0x9e8>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	2a 95       	dec	r18
    1520:	e2 f7       	brpl	.-8      	; 0x151a <main+0x9e4>
    1522:	80 95       	com	r24
    1524:	84 23       	and	r24, r20
    1526:	8c 93       	st	X, r24
                CLR_BIT(PORTA, 7 - i);
    1528:	ab e3       	ldi	r26, 0x3B	; 59
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	eb e3       	ldi	r30, 0x3B	; 59
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	fe 01       	movw	r30, r28
    1536:	e1 55       	subi	r30, 0x51	; 81
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	80 81       	ld	r24, Z
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	87 e0       	ldi	r24, 0x07	; 7
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	bc 01       	movw	r22, r24
    1546:	62 1b       	sub	r22, r18
    1548:	73 0b       	sbc	r23, r19
    154a:	9b 01       	movw	r18, r22
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <main+0xa22>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <main+0xa1e>
    155c:	80 95       	com	r24
    155e:	84 23       	and	r24, r20
    1560:	8c 93       	st	X, r24

        // LEDs Converging every 300 ms

         if (GET_BIT(PINB, 0) == 0 && GET_BIT(PINB, 1) == 1 && GET_BIT(PINB, 2) == 1)
        {
            for (u8 i = 0; i <= 3; i++)
    1562:	de 01       	movw	r26, r28
    1564:	a1 55       	subi	r26, 0x51	; 81
    1566:	bf 4f       	sbci	r27, 0xFF	; 255
    1568:	fe 01       	movw	r30, r28
    156a:	e1 55       	subi	r30, 0x51	; 81
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 81       	ld	r24, Z
    1570:	8f 5f       	subi	r24, 0xFF	; 255
    1572:	8c 93       	st	X, r24
    1574:	fe 01       	movw	r30, r28
    1576:	e1 55       	subi	r30, 0x51	; 81
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	80 81       	ld	r24, Z
    157c:	84 30       	cpi	r24, 0x04	; 4
    157e:	08 f4       	brcc	.+2      	; 0x1582 <main+0xa4c>
    1580:	da ce       	rjmp	.-588    	; 0x1336 <main+0x800>
            }
        }

        // LEDs Diverging every 300 ms

         if (GET_BIT(PINB, 0) == 1 && GET_BIT(PINB, 1) == 0 && GET_BIT(PINB, 2) == 0)
    1582:	e6 e3       	ldi	r30, 0x36	; 54
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	81 70       	andi	r24, 0x01	; 1
    158e:	90 70       	andi	r25, 0x00	; 0
    1590:	88 23       	and	r24, r24
    1592:	09 f4       	brne	.+2      	; 0x1596 <main+0xa60>
    1594:	4b c1       	rjmp	.+662    	; 0x182c <main+0xcf6>
    1596:	e6 e3       	ldi	r30, 0x36	; 54
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	86 95       	lsr	r24
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	81 70       	andi	r24, 0x01	; 1
    15a4:	90 70       	andi	r25, 0x00	; 0
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	09 f0       	breq	.+2      	; 0x15ac <main+0xa76>
    15aa:	40 c1       	rjmp	.+640    	; 0x182c <main+0xcf6>
    15ac:	e6 e3       	ldi	r30, 0x36	; 54
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	86 95       	lsr	r24
    15b4:	86 95       	lsr	r24
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	81 70       	andi	r24, 0x01	; 1
    15bc:	90 70       	andi	r25, 0x00	; 0
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <main+0xa8e>
    15c2:	34 c1       	rjmp	.+616    	; 0x182c <main+0xcf6>
        {
            for (s8 i = 3; i >= 0; i--)
    15c4:	fe 01       	movw	r30, r28
    15c6:	e2 55       	subi	r30, 0x52	; 82
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	83 e0       	ldi	r24, 0x03	; 3
    15cc:	80 83       	st	Z, r24
    15ce:	27 c1       	rjmp	.+590    	; 0x181e <main+0xce8>
            {
                SET_BIT(PORTA, i);
    15d0:	ab e3       	ldi	r26, 0x3B	; 59
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	eb e3       	ldi	r30, 0x3B	; 59
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	fe 01       	movw	r30, r28
    15de:	e2 55       	subi	r30, 0x52	; 82
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	80 81       	ld	r24, Z
    15e4:	28 2f       	mov	r18, r24
    15e6:	33 27       	eor	r19, r19
    15e8:	27 fd       	sbrc	r18, 7
    15ea:	30 95       	com	r19
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <main+0xac0>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	2a 95       	dec	r18
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <main+0xabc>
    15fa:	84 2b       	or	r24, r20
    15fc:	8c 93       	st	X, r24
                SET_BIT(PORTA, 7 - i);
    15fe:	ab e3       	ldi	r26, 0x3B	; 59
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	eb e3       	ldi	r30, 0x3B	; 59
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	fe 01       	movw	r30, r28
    160c:	e2 55       	subi	r30, 0x52	; 82
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	80 81       	ld	r24, Z
    1612:	28 2f       	mov	r18, r24
    1614:	33 27       	eor	r19, r19
    1616:	27 fd       	sbrc	r18, 7
    1618:	30 95       	com	r19
    161a:	87 e0       	ldi	r24, 0x07	; 7
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	fc 01       	movw	r30, r24
    1620:	e2 1b       	sub	r30, r18
    1622:	f3 0b       	sbc	r31, r19
    1624:	9f 01       	movw	r18, r30
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <main+0xafa>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	2a 95       	dec	r18
    1632:	e2 f7       	brpl	.-8      	; 0x162c <main+0xaf6>
    1634:	84 2b       	or	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	fe 01       	movw	r30, r28
    163a:	e1 5a       	subi	r30, 0xA1	; 161
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	a6 e9       	ldi	r26, 0x96	; 150
    1644:	b3 e4       	ldi	r27, 0x43	; 67
    1646:	80 83       	st	Z, r24
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	a2 83       	std	Z+2, r26	; 0x02
    164c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164e:	8e 01       	movw	r16, r28
    1650:	05 5a       	subi	r16, 0xA5	; 165
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	fe 01       	movw	r30, r28
    1656:	e1 5a       	subi	r30, 0xA1	; 161
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	60 81       	ld	r22, Z
    165c:	71 81       	ldd	r23, Z+1	; 0x01
    165e:	82 81       	ldd	r24, Z+2	; 0x02
    1660:	93 81       	ldd	r25, Z+3	; 0x03
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	4a e7       	ldi	r20, 0x7A	; 122
    1668:	53 e4       	ldi	r21, 0x43	; 67
    166a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	f8 01       	movw	r30, r16
    1674:	80 83       	st	Z, r24
    1676:	91 83       	std	Z+1, r25	; 0x01
    1678:	a2 83       	std	Z+2, r26	; 0x02
    167a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    167c:	fe 01       	movw	r30, r28
    167e:	e5 5a       	subi	r30, 0xA5	; 165
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	60 81       	ld	r22, Z
    1684:	71 81       	ldd	r23, Z+1	; 0x01
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e8       	ldi	r20, 0x80	; 128
    1690:	5f e3       	ldi	r21, 0x3F	; 63
    1692:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1696:	88 23       	and	r24, r24
    1698:	44 f4       	brge	.+16     	; 0x16aa <main+0xb74>
		__ticks = 1;
    169a:	fe 01       	movw	r30, r28
    169c:	e7 5a       	subi	r30, 0xA7	; 167
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	80 83       	st	Z, r24
    16a8:	64 c0       	rjmp	.+200    	; 0x1772 <main+0xc3c>
	else if (__tmp > 65535)
    16aa:	fe 01       	movw	r30, r28
    16ac:	e5 5a       	subi	r30, 0xA5	; 165
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	3f ef       	ldi	r19, 0xFF	; 255
    16bc:	4f e7       	ldi	r20, 0x7F	; 127
    16be:	57 e4       	ldi	r21, 0x47	; 71
    16c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16c4:	18 16       	cp	r1, r24
    16c6:	0c f0       	brlt	.+2      	; 0x16ca <main+0xb94>
    16c8:	43 c0       	rjmp	.+134    	; 0x1750 <main+0xc1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ca:	fe 01       	movw	r30, r28
    16cc:	e1 5a       	subi	r30, 0xA1	; 161
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e2       	ldi	r20, 0x20	; 32
    16de:	51 e4       	ldi	r21, 0x41	; 65
    16e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8e 01       	movw	r16, r28
    16ea:	07 5a       	subi	r16, 0xA7	; 167
    16ec:	1f 4f       	sbci	r17, 0xFF	; 255
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	f8 01       	movw	r30, r16
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	80 83       	st	Z, r24
    1700:	1f c0       	rjmp	.+62     	; 0x1740 <main+0xc0a>
    1702:	fe 01       	movw	r30, r28
    1704:	e9 5a       	subi	r30, 0xA9	; 169
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	89 e1       	ldi	r24, 0x19	; 25
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	91 83       	std	Z+1, r25	; 0x01
    170e:	80 83       	st	Z, r24
    1710:	fe 01       	movw	r30, r28
    1712:	e9 5a       	subi	r30, 0xA9	; 169
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	80 81       	ld	r24, Z
    1718:	91 81       	ldd	r25, Z+1	; 0x01
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <main+0xbe4>
    171e:	fe 01       	movw	r30, r28
    1720:	e9 5a       	subi	r30, 0xA9	; 169
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1728:	de 01       	movw	r26, r28
    172a:	a7 5a       	subi	r26, 0xA7	; 167
    172c:	bf 4f       	sbci	r27, 0xFF	; 255
    172e:	fe 01       	movw	r30, r28
    1730:	e7 5a       	subi	r30, 0xA7	; 167
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	11 96       	adiw	r26, 0x01	; 1
    173c:	9c 93       	st	X, r25
    173e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1740:	fe 01       	movw	r30, r28
    1742:	e7 5a       	subi	r30, 0xA7	; 167
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	d1 f6       	brne	.-76     	; 0x1702 <main+0xbcc>
    174e:	27 c0       	rjmp	.+78     	; 0x179e <main+0xc68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1750:	8e 01       	movw	r16, r28
    1752:	07 5a       	subi	r16, 0xA7	; 167
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	fe 01       	movw	r30, r28
    1758:	e5 5a       	subi	r30, 0xA5	; 165
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	60 81       	ld	r22, Z
    175e:	71 81       	ldd	r23, Z+1	; 0x01
    1760:	82 81       	ldd	r24, Z+2	; 0x02
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	f8 01       	movw	r30, r16
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24
    1772:	de 01       	movw	r26, r28
    1774:	ab 5a       	subi	r26, 0xAB	; 171
    1776:	bf 4f       	sbci	r27, 0xFF	; 255
    1778:	fe 01       	movw	r30, r28
    177a:	e7 5a       	subi	r30, 0xA7	; 167
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	8d 93       	st	X+, r24
    1784:	9c 93       	st	X, r25
    1786:	fe 01       	movw	r30, r28
    1788:	eb 5a       	subi	r30, 0xAB	; 171
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 81       	ld	r24, Z
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <main+0xc5a>
    1794:	fe 01       	movw	r30, r28
    1796:	eb 5a       	subi	r30, 0xAB	; 171
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
                _delay_ms(300);
                CLR_BIT(PORTA, i);
    179e:	ab e3       	ldi	r26, 0x3B	; 59
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	eb e3       	ldi	r30, 0x3B	; 59
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	fe 01       	movw	r30, r28
    17ac:	e2 55       	subi	r30, 0x52	; 82
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 81       	ld	r24, Z
    17b2:	28 2f       	mov	r18, r24
    17b4:	33 27       	eor	r19, r19
    17b6:	27 fd       	sbrc	r18, 7
    17b8:	30 95       	com	r19
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <main+0xc8e>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	2a 95       	dec	r18
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <main+0xc8a>
    17c8:	80 95       	com	r24
    17ca:	84 23       	and	r24, r20
    17cc:	8c 93       	st	X, r24
                CLR_BIT(PORTA, 7 - i);
    17ce:	ab e3       	ldi	r26, 0x3B	; 59
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	eb e3       	ldi	r30, 0x3B	; 59
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	fe 01       	movw	r30, r28
    17dc:	e2 55       	subi	r30, 0x52	; 82
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 81       	ld	r24, Z
    17e2:	28 2f       	mov	r18, r24
    17e4:	33 27       	eor	r19, r19
    17e6:	27 fd       	sbrc	r18, 7
    17e8:	30 95       	com	r19
    17ea:	87 e0       	ldi	r24, 0x07	; 7
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	bc 01       	movw	r22, r24
    17f0:	62 1b       	sub	r22, r18
    17f2:	73 0b       	sbc	r23, r19
    17f4:	9b 01       	movw	r18, r22
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <main+0xccc>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <main+0xcc8>
    1806:	80 95       	com	r24
    1808:	84 23       	and	r24, r20
    180a:	8c 93       	st	X, r24

        // LEDs Diverging every 300 ms

         if (GET_BIT(PINB, 0) == 1 && GET_BIT(PINB, 1) == 0 && GET_BIT(PINB, 2) == 0)
        {
            for (s8 i = 3; i >= 0; i--)
    180c:	de 01       	movw	r26, r28
    180e:	a2 55       	subi	r26, 0x52	; 82
    1810:	bf 4f       	sbci	r27, 0xFF	; 255
    1812:	fe 01       	movw	r30, r28
    1814:	e2 55       	subi	r30, 0x52	; 82
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 81       	ld	r24, Z
    181a:	81 50       	subi	r24, 0x01	; 1
    181c:	8c 93       	st	X, r24
    181e:	fe 01       	movw	r30, r28
    1820:	e2 55       	subi	r30, 0x52	; 82
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	80 81       	ld	r24, Z
    1826:	88 23       	and	r24, r24
    1828:	0c f0       	brlt	.+2      	; 0x182c <main+0xcf6>
    182a:	d2 ce       	rjmp	.-604    	; 0x15d0 <main+0xa9a>
            }
        }

        // Ping Pong effect every 250 ms

        if (GET_BIT(PINB, 0) == 1 && GET_BIT(PINB, 1) == 0 && GET_BIT(PINB, 2) == 1)
    182c:	e6 e3       	ldi	r30, 0x36	; 54
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	81 70       	andi	r24, 0x01	; 1
    1838:	90 70       	andi	r25, 0x00	; 0
    183a:	88 23       	and	r24, r24
    183c:	09 f4       	brne	.+2      	; 0x1840 <main+0xd0a>
    183e:	e0 c1       	rjmp	.+960    	; 0x1c00 <main+0x10ca>
    1840:	e6 e3       	ldi	r30, 0x36	; 54
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	86 95       	lsr	r24
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	81 70       	andi	r24, 0x01	; 1
    184e:	90 70       	andi	r25, 0x00	; 0
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	09 f0       	breq	.+2      	; 0x1856 <main+0xd20>
    1854:	d5 c1       	rjmp	.+938    	; 0x1c00 <main+0x10ca>
    1856:	e6 e3       	ldi	r30, 0x36	; 54
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	86 95       	lsr	r24
    185e:	86 95       	lsr	r24
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	81 70       	andi	r24, 0x01	; 1
    1866:	90 70       	andi	r25, 0x00	; 0
    1868:	88 23       	and	r24, r24
    186a:	09 f4       	brne	.+2      	; 0x186e <main+0xd38>
    186c:	c9 c1       	rjmp	.+914    	; 0x1c00 <main+0x10ca>
        {
            for (u8 i = 0; i <= 3; i++)
    186e:	fe 01       	movw	r30, r28
    1870:	e3 55       	subi	r30, 0x53	; 83
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	10 82       	st	Z, r1
    1876:	ec c0       	rjmp	.+472    	; 0x1a50 <main+0xf1a>
            {
                SET_BIT(PORTA, i);
    1878:	ab e3       	ldi	r26, 0x3B	; 59
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	eb e3       	ldi	r30, 0x3B	; 59
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	fe 01       	movw	r30, r28
    1886:	e3 55       	subi	r30, 0x53	; 83
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 81       	ld	r24, Z
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 c0       	rjmp	.+4      	; 0x189a <main+0xd64>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	2a 95       	dec	r18
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <main+0xd60>
    189e:	84 2b       	or	r24, r20
    18a0:	8c 93       	st	X, r24
                SET_BIT(PORTA, 7 - i);
    18a2:	ab e3       	ldi	r26, 0x3B	; 59
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	eb e3       	ldi	r30, 0x3B	; 59
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	fe 01       	movw	r30, r28
    18b0:	e3 55       	subi	r30, 0x53	; 83
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 81       	ld	r24, Z
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	87 e0       	ldi	r24, 0x07	; 7
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	fc 01       	movw	r30, r24
    18c0:	e2 1b       	sub	r30, r18
    18c2:	f3 0b       	sbc	r31, r19
    18c4:	9f 01       	movw	r18, r30
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <main+0xd9a>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	2a 95       	dec	r18
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <main+0xd96>
    18d4:	84 2b       	or	r24, r20
    18d6:	8c 93       	st	X, r24
    18d8:	fe 01       	movw	r30, r28
    18da:	ef 5a       	subi	r30, 0xAF	; 175
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	aa e7       	ldi	r26, 0x7A	; 122
    18e4:	b3 e4       	ldi	r27, 0x43	; 67
    18e6:	80 83       	st	Z, r24
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	a2 83       	std	Z+2, r26	; 0x02
    18ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ee:	8e 01       	movw	r16, r28
    18f0:	03 5b       	subi	r16, 0xB3	; 179
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	fe 01       	movw	r30, r28
    18f6:	ef 5a       	subi	r30, 0xAF	; 175
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a e7       	ldi	r20, 0x7A	; 122
    1908:	53 e4       	ldi	r21, 0x43	; 67
    190a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	f8 01       	movw	r30, r16
    1914:	80 83       	st	Z, r24
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	a2 83       	std	Z+2, r26	; 0x02
    191a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    191c:	fe 01       	movw	r30, r28
    191e:	e3 5b       	subi	r30, 0xB3	; 179
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e8       	ldi	r20, 0x80	; 128
    1930:	5f e3       	ldi	r21, 0x3F	; 63
    1932:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1936:	88 23       	and	r24, r24
    1938:	44 f4       	brge	.+16     	; 0x194a <main+0xe14>
		__ticks = 1;
    193a:	fe 01       	movw	r30, r28
    193c:	e5 5b       	subi	r30, 0xB5	; 181
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
    1948:	64 c0       	rjmp	.+200    	; 0x1a12 <main+0xedc>
	else if (__tmp > 65535)
    194a:	fe 01       	movw	r30, r28
    194c:	e3 5b       	subi	r30, 0xB3	; 179
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	4f e7       	ldi	r20, 0x7F	; 127
    195e:	57 e4       	ldi	r21, 0x47	; 71
    1960:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1964:	18 16       	cp	r1, r24
    1966:	0c f0       	brlt	.+2      	; 0x196a <main+0xe34>
    1968:	43 c0       	rjmp	.+134    	; 0x19f0 <main+0xeba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	fe 01       	movw	r30, r28
    196c:	ef 5a       	subi	r30, 0xAF	; 175
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	8e 01       	movw	r16, r28
    198a:	05 5b       	subi	r16, 0xB5	; 181
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	f8 01       	movw	r30, r16
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	80 83       	st	Z, r24
    19a0:	1f c0       	rjmp	.+62     	; 0x19e0 <main+0xeaa>
    19a2:	fe 01       	movw	r30, r28
    19a4:	e7 5b       	subi	r30, 0xB7	; 183
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	89 e1       	ldi	r24, 0x19	; 25
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	91 83       	std	Z+1, r25	; 0x01
    19ae:	80 83       	st	Z, r24
    19b0:	fe 01       	movw	r30, r28
    19b2:	e7 5b       	subi	r30, 0xB7	; 183
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <main+0xe84>
    19be:	fe 01       	movw	r30, r28
    19c0:	e7 5b       	subi	r30, 0xB7	; 183
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c8:	de 01       	movw	r26, r28
    19ca:	a5 5b       	subi	r26, 0xB5	; 181
    19cc:	bf 4f       	sbci	r27, 0xFF	; 255
    19ce:	fe 01       	movw	r30, r28
    19d0:	e5 5b       	subi	r30, 0xB5	; 181
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	91 81       	ldd	r25, Z+1	; 0x01
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	9c 93       	st	X, r25
    19de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e0:	fe 01       	movw	r30, r28
    19e2:	e5 5b       	subi	r30, 0xB5	; 181
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	d1 f6       	brne	.-76     	; 0x19a2 <main+0xe6c>
    19ee:	27 c0       	rjmp	.+78     	; 0x1a3e <main+0xf08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f0:	8e 01       	movw	r16, r28
    19f2:	05 5b       	subi	r16, 0xB5	; 181
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	fe 01       	movw	r30, r28
    19f8:	e3 5b       	subi	r30, 0xB3	; 179
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	60 81       	ld	r22, Z
    19fe:	71 81       	ldd	r23, Z+1	; 0x01
    1a00:	82 81       	ldd	r24, Z+2	; 0x02
    1a02:	93 81       	ldd	r25, Z+3	; 0x03
    1a04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
    1a12:	de 01       	movw	r26, r28
    1a14:	a9 5b       	subi	r26, 0xB9	; 185
    1a16:	bf 4f       	sbci	r27, 0xFF	; 255
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e5 5b       	subi	r30, 0xB5	; 181
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	8d 93       	st	X+, r24
    1a24:	9c 93       	st	X, r25
    1a26:	fe 01       	movw	r30, r28
    1a28:	e9 5b       	subi	r30, 0xB9	; 185
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	80 81       	ld	r24, Z
    1a2e:	91 81       	ldd	r25, Z+1	; 0x01
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <main+0xefa>
    1a34:	fe 01       	movw	r30, r28
    1a36:	e9 5b       	subi	r30, 0xB9	; 185
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24

        // Ping Pong effect every 250 ms

        if (GET_BIT(PINB, 0) == 1 && GET_BIT(PINB, 1) == 0 && GET_BIT(PINB, 2) == 1)
        {
            for (u8 i = 0; i <= 3; i++)
    1a3e:	de 01       	movw	r26, r28
    1a40:	a3 55       	subi	r26, 0x53	; 83
    1a42:	bf 4f       	sbci	r27, 0xFF	; 255
    1a44:	fe 01       	movw	r30, r28
    1a46:	e3 55       	subi	r30, 0x53	; 83
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8f 5f       	subi	r24, 0xFF	; 255
    1a4e:	8c 93       	st	X, r24
    1a50:	fe 01       	movw	r30, r28
    1a52:	e3 55       	subi	r30, 0x53	; 83
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	80 81       	ld	r24, Z
    1a58:	84 30       	cpi	r24, 0x04	; 4
    1a5a:	08 f4       	brcc	.+2      	; 0x1a5e <main+0xf28>
    1a5c:	0d cf       	rjmp	.-486    	; 0x1878 <main+0xd42>
                SET_BIT(PORTA, i);
                SET_BIT(PORTA, 7 - i);
                _delay_ms(250);
            }

            for (s8 i = 3; i >= 0; i--)
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e4 55       	subi	r30, 0x54	; 84
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	80 83       	st	Z, r24
    1a68:	c4 c0       	rjmp	.+392    	; 0x1bf2 <main+0x10bc>
            {
                CLR_BIT(PORTA, i);
    1a6a:	ab e3       	ldi	r26, 0x3B	; 59
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	eb e3       	ldi	r30, 0x3B	; 59
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	fe 01       	movw	r30, r28
    1a78:	e4 55       	subi	r30, 0x54	; 84
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 81       	ld	r24, Z
    1a7e:	28 2f       	mov	r18, r24
    1a80:	33 27       	eor	r19, r19
    1a82:	27 fd       	sbrc	r18, 7
    1a84:	30 95       	com	r19
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <main+0xf5a>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	2a 95       	dec	r18
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <main+0xf56>
    1a94:	80 95       	com	r24
    1a96:	84 23       	and	r24, r20
    1a98:	8c 93       	st	X, r24
                CLR_BIT(PORTA, 7 - i);
    1a9a:	ab e3       	ldi	r26, 0x3B	; 59
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	eb e3       	ldi	r30, 0x3B	; 59
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	48 2f       	mov	r20, r24
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e4 55       	subi	r30, 0x54	; 84
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 81       	ld	r24, Z
    1aae:	28 2f       	mov	r18, r24
    1ab0:	33 27       	eor	r19, r19
    1ab2:	27 fd       	sbrc	r18, 7
    1ab4:	30 95       	com	r19
    1ab6:	87 e0       	ldi	r24, 0x07	; 7
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	bc 01       	movw	r22, r24
    1abc:	62 1b       	sub	r22, r18
    1abe:	73 0b       	sbc	r23, r19
    1ac0:	9b 01       	movw	r18, r22
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <main+0xf96>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	2a 95       	dec	r18
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <main+0xf92>
    1ad0:	80 95       	com	r24
    1ad2:	84 23       	and	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	ed 5b       	subi	r30, 0xBD	; 189
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	aa e7       	ldi	r26, 0x7A	; 122
    1ae2:	b3 e4       	ldi	r27, 0x43	; 67
    1ae4:	80 83       	st	Z, r24
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	a2 83       	std	Z+2, r26	; 0x02
    1aea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aec:	8e 01       	movw	r16, r28
    1aee:	01 5c       	subi	r16, 0xC1	; 193
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	fe 01       	movw	r30, r28
    1af4:	ed 5b       	subi	r30, 0xBD	; 189
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	60 81       	ld	r22, Z
    1afa:	71 81       	ldd	r23, Z+1	; 0x01
    1afc:	82 81       	ldd	r24, Z+2	; 0x02
    1afe:	93 81       	ldd	r25, Z+3	; 0x03
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a e7       	ldi	r20, 0x7A	; 122
    1b06:	53 e4       	ldi	r21, 0x43	; 67
    1b08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	f8 01       	movw	r30, r16
    1b12:	80 83       	st	Z, r24
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	a2 83       	std	Z+2, r26	; 0x02
    1b18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	ff 96       	adiw	r30, 0x3f	; 63
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <main+0x100a>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9e af       	std	Y+62, r25	; 0x3e
    1b3c:	8d af       	std	Y+61, r24	; 0x3d
    1b3e:	46 c0       	rjmp	.+140    	; 0x1bcc <main+0x1096>
	else if (__tmp > 65535)
    1b40:	fe 01       	movw	r30, r28
    1b42:	ff 96       	adiw	r30, 0x3f	; 63
    1b44:	60 81       	ld	r22, Z
    1b46:	71 81       	ldd	r23, Z+1	; 0x01
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	93 81       	ldd	r25, Z+3	; 0x03
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	3f ef       	ldi	r19, 0xFF	; 255
    1b50:	4f e7       	ldi	r20, 0x7F	; 127
    1b52:	57 e4       	ldi	r21, 0x47	; 71
    1b54:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b58:	18 16       	cp	r1, r24
    1b5a:	64 f5       	brge	.+88     	; 0x1bb4 <main+0x107e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ed 5b       	subi	r30, 0xBD	; 189
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	60 81       	ld	r22, Z
    1b64:	71 81       	ldd	r23, Z+1	; 0x01
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 e4       	ldi	r21, 0x41	; 65
    1b72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9e af       	std	Y+62, r25	; 0x3e
    1b88:	8d af       	std	Y+61, r24	; 0x3d
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <main+0x1074>
    1b8c:	89 e1       	ldi	r24, 0x19	; 25
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9c af       	std	Y+60, r25	; 0x3c
    1b92:	8b af       	std	Y+59, r24	; 0x3b
    1b94:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b96:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <main+0x1062>
    1b9c:	9c af       	std	Y+60, r25	; 0x3c
    1b9e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ba2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	9e af       	std	Y+62, r25	; 0x3e
    1ba8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bac:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	69 f7       	brne	.-38     	; 0x1b8c <main+0x1056>
    1bb2:	16 c0       	rjmp	.+44     	; 0x1be0 <main+0x10aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	ff 96       	adiw	r30, 0x3f	; 63
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9e af       	std	Y+62, r25	; 0x3e
    1bca:	8d af       	std	Y+61, r24	; 0x3d
    1bcc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bce:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bd0:	9a af       	std	Y+58, r25	; 0x3a
    1bd2:	89 af       	std	Y+57, r24	; 0x39
    1bd4:	89 ad       	ldd	r24, Y+57	; 0x39
    1bd6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <main+0x10a2>
    1bdc:	9a af       	std	Y+58, r25	; 0x3a
    1bde:	89 af       	std	Y+57, r24	; 0x39
                SET_BIT(PORTA, i);
                SET_BIT(PORTA, 7 - i);
                _delay_ms(250);
            }

            for (s8 i = 3; i >= 0; i--)
    1be0:	de 01       	movw	r26, r28
    1be2:	a4 55       	subi	r26, 0x54	; 84
    1be4:	bf 4f       	sbci	r27, 0xFF	; 255
    1be6:	fe 01       	movw	r30, r28
    1be8:	e4 55       	subi	r30, 0x54	; 84
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 81       	ld	r24, Z
    1bee:	81 50       	subi	r24, 0x01	; 1
    1bf0:	8c 93       	st	X, r24
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e4 55       	subi	r30, 0x54	; 84
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 23       	and	r24, r24
    1bfc:	0c f0       	brlt	.+2      	; 0x1c00 <main+0x10ca>
    1bfe:	35 cf       	rjmp	.-406    	; 0x1a6a <main+0xf34>
            }
        }

        // Incrementing (Snake effect) every 300 ms

         if (GET_BIT(PINB, 0) == 1 && GET_BIT(PINB, 1) == 1 && GET_BIT(PINB, 2) == 0)
    1c00:	e6 e3       	ldi	r30, 0x36	; 54
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	88 2f       	mov	r24, r24
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	81 70       	andi	r24, 0x01	; 1
    1c0c:	90 70       	andi	r25, 0x00	; 0
    1c0e:	88 23       	and	r24, r24
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <main+0x10de>
    1c12:	28 c1       	rjmp	.+592    	; 0x1e64 <main+0x132e>
    1c14:	e6 e3       	ldi	r30, 0x36	; 54
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	86 95       	lsr	r24
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	81 70       	andi	r24, 0x01	; 1
    1c22:	90 70       	andi	r25, 0x00	; 0
    1c24:	88 23       	and	r24, r24
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <main+0x10f4>
    1c28:	1d c1       	rjmp	.+570    	; 0x1e64 <main+0x132e>
    1c2a:	e6 e3       	ldi	r30, 0x36	; 54
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	86 95       	lsr	r24
    1c32:	86 95       	lsr	r24
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	81 70       	andi	r24, 0x01	; 1
    1c3a:	90 70       	andi	r25, 0x00	; 0
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	09 f0       	breq	.+2      	; 0x1c42 <main+0x110c>
    1c40:	11 c1       	rjmp	.+546    	; 0x1e64 <main+0x132e>
        {
            for (u8 i = 0; i <= 7; i++)
    1c42:	fe 01       	movw	r30, r28
    1c44:	e5 55       	subi	r30, 0x55	; 85
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	10 82       	st	Z, r1
    1c4a:	90 c0       	rjmp	.+288    	; 0x1d6c <main+0x1236>
            {
                SET_BIT(PORTA, i);
    1c4c:	ab e3       	ldi	r26, 0x3B	; 59
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	eb e3       	ldi	r30, 0x3B	; 59
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e5 55       	subi	r30, 0x55	; 85
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <main+0x1138>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	2a 95       	dec	r18
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <main+0x1134>
    1c72:	84 2b       	or	r24, r20
    1c74:	8c 93       	st	X, r24
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a6 e9       	ldi	r26, 0x96	; 150
    1c7c:	b3 e4       	ldi	r27, 0x43	; 67
    1c7e:	8d ab       	std	Y+53, r24	; 0x35
    1c80:	9e ab       	std	Y+54, r25	; 0x36
    1c82:	af ab       	std	Y+55, r26	; 0x37
    1c84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c86:	6d a9       	ldd	r22, Y+53	; 0x35
    1c88:	7e a9       	ldd	r23, Y+54	; 0x36
    1c8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a e7       	ldi	r20, 0x7A	; 122
    1c94:	53 e4       	ldi	r21, 0x43	; 67
    1c96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	89 ab       	std	Y+49, r24	; 0x31
    1ca0:	9a ab       	std	Y+50, r25	; 0x32
    1ca2:	ab ab       	std	Y+51, r26	; 0x33
    1ca4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ca6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca8:	7a a9       	ldd	r23, Y+50	; 0x32
    1caa:	8b a9       	ldd	r24, Y+51	; 0x33
    1cac:	9c a9       	ldd	r25, Y+52	; 0x34
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cba:	88 23       	and	r24, r24
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <main+0x1192>
		__ticks = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	98 ab       	std	Y+48, r25	; 0x30
    1cc4:	8f a7       	std	Y+47, r24	; 0x2f
    1cc6:	3f c0       	rjmp	.+126    	; 0x1d46 <main+0x1210>
	else if (__tmp > 65535)
    1cc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cca:	7a a9       	ldd	r23, Y+50	; 0x32
    1ccc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cce:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	4c f5       	brge	.+82     	; 0x1d32 <main+0x11fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ce2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ce4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ce6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e2       	ldi	r20, 0x20	; 32
    1cee:	51 e4       	ldi	r21, 0x41	; 65
    1cf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	98 ab       	std	Y+48, r25	; 0x30
    1d06:	8f a7       	std	Y+47, r24	; 0x2f
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <main+0x11f2>
    1d0a:	89 e1       	ldi	r24, 0x19	; 25
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9e a7       	std	Y+46, r25	; 0x2e
    1d10:	8d a7       	std	Y+45, r24	; 0x2d
    1d12:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d14:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <main+0x11e0>
    1d1a:	9e a7       	std	Y+46, r25	; 0x2e
    1d1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d20:	98 a9       	ldd	r25, Y+48	; 0x30
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	98 ab       	std	Y+48, r25	; 0x30
    1d26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <main+0x11d4>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <main+0x1224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	69 a9       	ldd	r22, Y+49	; 0x31
    1d34:	7a a9       	ldd	r23, Y+50	; 0x32
    1d36:	8b a9       	ldd	r24, Y+51	; 0x33
    1d38:	9c a9       	ldd	r25, Y+52	; 0x34
    1d3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	98 ab       	std	Y+48, r25	; 0x30
    1d44:	8f a7       	std	Y+47, r24	; 0x2f
    1d46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d48:	98 a9       	ldd	r25, Y+48	; 0x30
    1d4a:	9c a7       	std	Y+44, r25	; 0x2c
    1d4c:	8b a7       	std	Y+43, r24	; 0x2b
    1d4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <main+0x121c>
    1d56:	9c a7       	std	Y+44, r25	; 0x2c
    1d58:	8b a7       	std	Y+43, r24	; 0x2b

        // Incrementing (Snake effect) every 300 ms

         if (GET_BIT(PINB, 0) == 1 && GET_BIT(PINB, 1) == 1 && GET_BIT(PINB, 2) == 0)
        {
            for (u8 i = 0; i <= 7; i++)
    1d5a:	de 01       	movw	r26, r28
    1d5c:	a5 55       	subi	r26, 0x55	; 85
    1d5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d60:	fe 01       	movw	r30, r28
    1d62:	e5 55       	subi	r30, 0x55	; 85
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	8c 93       	st	X, r24
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e5 55       	subi	r30, 0x55	; 85
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	88 30       	cpi	r24, 0x08	; 8
    1d76:	08 f4       	brcc	.+2      	; 0x1d7a <main+0x1244>
    1d78:	69 cf       	rjmp	.-302    	; 0x1c4c <main+0x1116>
            {
                SET_BIT(PORTA, i);
                _delay_ms(300);
            }
            PORTA = 0x00;
    1d7a:	eb e3       	ldi	r30, 0x3B	; 59
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	10 82       	st	Z, r1
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a6 e9       	ldi	r26, 0x96	; 150
    1d86:	b3 e4       	ldi	r27, 0x43	; 67
    1d88:	8f a3       	std	Y+39, r24	; 0x27
    1d8a:	98 a7       	std	Y+40, r25	; 0x28
    1d8c:	a9 a7       	std	Y+41, r26	; 0x29
    1d8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d90:	6f a1       	ldd	r22, Y+39	; 0x27
    1d92:	78 a5       	ldd	r23, Y+40	; 0x28
    1d94:	89 a5       	ldd	r24, Y+41	; 0x29
    1d96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	4a e7       	ldi	r20, 0x7A	; 122
    1d9e:	53 e4       	ldi	r21, 0x43	; 67
    1da0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	8b a3       	std	Y+35, r24	; 0x23
    1daa:	9c a3       	std	Y+36, r25	; 0x24
    1dac:	ad a3       	std	Y+37, r26	; 0x25
    1dae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1db0:	6b a1       	ldd	r22, Y+35	; 0x23
    1db2:	7c a1       	ldd	r23, Y+36	; 0x24
    1db4:	8d a1       	ldd	r24, Y+37	; 0x25
    1db6:	9e a1       	ldd	r25, Y+38	; 0x26
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e8       	ldi	r20, 0x80	; 128
    1dbe:	5f e3       	ldi	r21, 0x3F	; 63
    1dc0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dc4:	88 23       	and	r24, r24
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <main+0x129c>
		__ticks = 1;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9a a3       	std	Y+34, r25	; 0x22
    1dce:	89 a3       	std	Y+33, r24	; 0x21
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <main+0x131a>
	else if (__tmp > 65535)
    1dd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	3f ef       	ldi	r19, 0xFF	; 255
    1dde:	4f e7       	ldi	r20, 0x7F	; 127
    1de0:	57 e4       	ldi	r21, 0x47	; 71
    1de2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1de6:	18 16       	cp	r1, r24
    1de8:	4c f5       	brge	.+82     	; 0x1e3c <main+0x1306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dea:	6f a1       	ldd	r22, Y+39	; 0x27
    1dec:	78 a5       	ldd	r23, Y+40	; 0x28
    1dee:	89 a5       	ldd	r24, Y+41	; 0x29
    1df0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e2       	ldi	r20, 0x20	; 32
    1df8:	51 e4       	ldi	r21, 0x41	; 65
    1dfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9a a3       	std	Y+34, r25	; 0x22
    1e10:	89 a3       	std	Y+33, r24	; 0x21
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <main+0x12fc>
    1e14:	89 e1       	ldi	r24, 0x19	; 25
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	98 a3       	std	Y+32, r25	; 0x20
    1e1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <main+0x12ea>
    1e24:	98 a3       	std	Y+32, r25	; 0x20
    1e26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e28:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	9a a3       	std	Y+34, r25	; 0x22
    1e30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e32:	89 a1       	ldd	r24, Y+33	; 0x21
    1e34:	9a a1       	ldd	r25, Y+34	; 0x22
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	69 f7       	brne	.-38     	; 0x1e14 <main+0x12de>
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <main+0x132e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e40:	8d a1       	ldd	r24, Y+37	; 0x25
    1e42:	9e a1       	ldd	r25, Y+38	; 0x26
    1e44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9a a3       	std	Y+34, r25	; 0x22
    1e4e:	89 a3       	std	Y+33, r24	; 0x21
    1e50:	89 a1       	ldd	r24, Y+33	; 0x21
    1e52:	9a a1       	ldd	r25, Y+34	; 0x22
    1e54:	9e 8f       	std	Y+30, r25	; 0x1e
    1e56:	8d 8f       	std	Y+29, r24	; 0x1d
    1e58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <main+0x1326>
    1e60:	9e 8f       	std	Y+30, r25	; 0x1e
    1e62:	8d 8f       	std	Y+29, r24	; 0x1d
            _delay_ms(300);
        }

       // 2-LEDs Converging/Diverging every 300 ms

        if (GET_BIT(PINB, 0) == 1 && GET_BIT(PINB, 1) == 1 && GET_BIT(PINB, 2) == 1)
    1e64:	e6 e3       	ldi	r30, 0x36	; 54
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	81 70       	andi	r24, 0x01	; 1
    1e70:	90 70       	andi	r25, 0x00	; 0
    1e72:	88 23       	and	r24, r24
    1e74:	11 f4       	brne	.+4      	; 0x1e7a <main+0x1344>
    1e76:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <main+0x30>
    1e7a:	e6 e3       	ldi	r30, 0x36	; 54
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	86 95       	lsr	r24
    1e82:	88 2f       	mov	r24, r24
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	81 70       	andi	r24, 0x01	; 1
    1e88:	90 70       	andi	r25, 0x00	; 0
    1e8a:	88 23       	and	r24, r24
    1e8c:	11 f4       	brne	.+4      	; 0x1e92 <main+0x135c>
    1e8e:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <main+0x30>
    1e92:	e6 e3       	ldi	r30, 0x36	; 54
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	86 95       	lsr	r24
    1e9a:	86 95       	lsr	r24
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	81 70       	andi	r24, 0x01	; 1
    1ea2:	90 70       	andi	r25, 0x00	; 0
    1ea4:	88 23       	and	r24, r24
    1ea6:	11 f4       	brne	.+4      	; 0x1eac <main+0x1376>
    1ea8:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <main+0x30>
        {
            for (u8 i = 0; i <= 3; i++)
    1eac:	fe 01       	movw	r30, r28
    1eae:	e6 55       	subi	r30, 0x56	; 86
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	10 82       	st	Z, r1
    1eb4:	de c0       	rjmp	.+444    	; 0x2072 <main+0x153c>
            {
                SET_BIT(PORTA, i);
    1eb6:	ab e3       	ldi	r26, 0x3B	; 59
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	eb e3       	ldi	r30, 0x3B	; 59
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	48 2f       	mov	r20, r24
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e6 55       	subi	r30, 0x56	; 86
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	80 81       	ld	r24, Z
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <main+0x13a2>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	2a 95       	dec	r18
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <main+0x139e>
    1edc:	84 2b       	or	r24, r20
    1ede:	8c 93       	st	X, r24
                SET_BIT(PORTA, 7 - i);
    1ee0:	ab e3       	ldi	r26, 0x3B	; 59
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	eb e3       	ldi	r30, 0x3B	; 59
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	48 2f       	mov	r20, r24
    1eec:	fe 01       	movw	r30, r28
    1eee:	e6 55       	subi	r30, 0x56	; 86
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	80 81       	ld	r24, Z
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	87 e0       	ldi	r24, 0x07	; 7
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	bc 01       	movw	r22, r24
    1efe:	62 1b       	sub	r22, r18
    1f00:	73 0b       	sbc	r23, r19
    1f02:	9b 01       	movw	r18, r22
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <main+0x13d8>
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	2a 95       	dec	r18
    1f10:	e2 f7       	brpl	.-8      	; 0x1f0a <main+0x13d4>
    1f12:	84 2b       	or	r24, r20
    1f14:	8c 93       	st	X, r24
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	a6 e9       	ldi	r26, 0x96	; 150
    1f1c:	b3 e4       	ldi	r27, 0x43	; 67
    1f1e:	89 8f       	std	Y+25, r24	; 0x19
    1f20:	9a 8f       	std	Y+26, r25	; 0x1a
    1f22:	ab 8f       	std	Y+27, r26	; 0x1b
    1f24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f26:	69 8d       	ldd	r22, Y+25	; 0x19
    1f28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	4a e7       	ldi	r20, 0x7A	; 122
    1f34:	53 e4       	ldi	r21, 0x43	; 67
    1f36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	8d 8b       	std	Y+21, r24	; 0x15
    1f40:	9e 8b       	std	Y+22, r25	; 0x16
    1f42:	af 8b       	std	Y+23, r26	; 0x17
    1f44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f46:	6d 89       	ldd	r22, Y+21	; 0x15
    1f48:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e8       	ldi	r20, 0x80	; 128
    1f54:	5f e3       	ldi	r21, 0x3F	; 63
    1f56:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	2c f4       	brge	.+10     	; 0x1f68 <main+0x1432>
		__ticks = 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	9c 8b       	std	Y+20, r25	; 0x14
    1f64:	8b 8b       	std	Y+19, r24	; 0x13
    1f66:	3f c0       	rjmp	.+126    	; 0x1fe6 <main+0x14b0>
	else if (__tmp > 65535)
    1f68:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	3f ef       	ldi	r19, 0xFF	; 255
    1f74:	4f e7       	ldi	r20, 0x7F	; 127
    1f76:	57 e4       	ldi	r21, 0x47	; 71
    1f78:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f7c:	18 16       	cp	r1, r24
    1f7e:	4c f5       	brge	.+82     	; 0x1fd2 <main+0x149c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f80:	69 8d       	ldd	r22, Y+25	; 0x19
    1f82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e2       	ldi	r20, 0x20	; 32
    1f8e:	51 e4       	ldi	r21, 0x41	; 65
    1f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9c 8b       	std	Y+20, r25	; 0x14
    1fa6:	8b 8b       	std	Y+19, r24	; 0x13
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <main+0x1492>
    1faa:	89 e1       	ldi	r24, 0x19	; 25
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9a 8b       	std	Y+18, r25	; 0x12
    1fb0:	89 8b       	std	Y+17, r24	; 0x11
    1fb2:	89 89       	ldd	r24, Y+17	; 0x11
    1fb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <main+0x1480>
    1fba:	9a 8b       	std	Y+18, r25	; 0x12
    1fbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	9c 8b       	std	Y+20, r25	; 0x14
    1fc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fca:	9c 89       	ldd	r25, Y+20	; 0x14
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	69 f7       	brne	.-38     	; 0x1faa <main+0x1474>
    1fd0:	14 c0       	rjmp	.+40     	; 0x1ffa <main+0x14c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9c 8b       	std	Y+20, r25	; 0x14
    1fe4:	8b 8b       	std	Y+19, r24	; 0x13
    1fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fea:	98 8b       	std	Y+16, r25	; 0x10
    1fec:	8f 87       	std	Y+15, r24	; 0x0f
    1fee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff0:	98 89       	ldd	r25, Y+16	; 0x10
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	f1 f7       	brne	.-4      	; 0x1ff2 <main+0x14bc>
    1ff6:	98 8b       	std	Y+16, r25	; 0x10
    1ff8:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(300);
                CLR_BIT(PORTA, i);
    1ffa:	ab e3       	ldi	r26, 0x3B	; 59
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	eb e3       	ldi	r30, 0x3B	; 59
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	48 2f       	mov	r20, r24
    2006:	fe 01       	movw	r30, r28
    2008:	e6 55       	subi	r30, 0x56	; 86
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 c0       	rjmp	.+4      	; 0x201c <main+0x14e6>
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	2a 95       	dec	r18
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <main+0x14e2>
    2020:	80 95       	com	r24
    2022:	84 23       	and	r24, r20
    2024:	8c 93       	st	X, r24
                CLR_BIT(PORTA, 7 - i);
    2026:	ab e3       	ldi	r26, 0x3B	; 59
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	eb e3       	ldi	r30, 0x3B	; 59
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	48 2f       	mov	r20, r24
    2032:	fe 01       	movw	r30, r28
    2034:	e6 55       	subi	r30, 0x56	; 86
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	87 e0       	ldi	r24, 0x07	; 7
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	fc 01       	movw	r30, r24
    2044:	e2 1b       	sub	r30, r18
    2046:	f3 0b       	sbc	r31, r19
    2048:	9f 01       	movw	r18, r30
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	02 2e       	mov	r0, r18
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <main+0x1520>
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	0a 94       	dec	r0
    2058:	e2 f7       	brpl	.-8      	; 0x2052 <main+0x151c>
    205a:	80 95       	com	r24
    205c:	84 23       	and	r24, r20
    205e:	8c 93       	st	X, r24

       // 2-LEDs Converging/Diverging every 300 ms

        if (GET_BIT(PINB, 0) == 1 && GET_BIT(PINB, 1) == 1 && GET_BIT(PINB, 2) == 1)
        {
            for (u8 i = 0; i <= 3; i++)
    2060:	de 01       	movw	r26, r28
    2062:	a6 55       	subi	r26, 0x56	; 86
    2064:	bf 4f       	sbci	r27, 0xFF	; 255
    2066:	fe 01       	movw	r30, r28
    2068:	e6 55       	subi	r30, 0x56	; 86
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	8f 5f       	subi	r24, 0xFF	; 255
    2070:	8c 93       	st	X, r24
    2072:	fe 01       	movw	r30, r28
    2074:	e6 55       	subi	r30, 0x56	; 86
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	84 30       	cpi	r24, 0x04	; 4
    207c:	08 f4       	brcc	.+2      	; 0x2080 <main+0x154a>
    207e:	1b cf       	rjmp	.-458    	; 0x1eb6 <main+0x1380>
                _delay_ms(300);
                CLR_BIT(PORTA, i);
                CLR_BIT(PORTA, 7 - i);
            }

            for (s8 i = 2; i >= 1; i--)
    2080:	fe 01       	movw	r30, r28
    2082:	e7 55       	subi	r30, 0x57	; 87
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	82 e0       	ldi	r24, 0x02	; 2
    2088:	80 83       	st	Z, r24
    208a:	e6 c0       	rjmp	.+460    	; 0x2258 <main+0x1722>
            {
                SET_BIT(PORTA, i);
    208c:	ab e3       	ldi	r26, 0x3B	; 59
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	eb e3       	ldi	r30, 0x3B	; 59
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	48 2f       	mov	r20, r24
    2098:	fe 01       	movw	r30, r28
    209a:	e7 55       	subi	r30, 0x57	; 87
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 81       	ld	r24, Z
    20a0:	28 2f       	mov	r18, r24
    20a2:	33 27       	eor	r19, r19
    20a4:	27 fd       	sbrc	r18, 7
    20a6:	30 95       	com	r19
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <main+0x157c>
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	2a 95       	dec	r18
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <main+0x1578>
    20b6:	84 2b       	or	r24, r20
    20b8:	8c 93       	st	X, r24
                SET_BIT(PORTA, 7 - i);
    20ba:	ab e3       	ldi	r26, 0x3B	; 59
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	eb e3       	ldi	r30, 0x3B	; 59
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	48 2f       	mov	r20, r24
    20c6:	fe 01       	movw	r30, r28
    20c8:	e7 55       	subi	r30, 0x57	; 87
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	80 81       	ld	r24, Z
    20ce:	28 2f       	mov	r18, r24
    20d0:	33 27       	eor	r19, r19
    20d2:	27 fd       	sbrc	r18, 7
    20d4:	30 95       	com	r19
    20d6:	87 e0       	ldi	r24, 0x07	; 7
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	bc 01       	movw	r22, r24
    20dc:	62 1b       	sub	r22, r18
    20de:	73 0b       	sbc	r23, r19
    20e0:	9b 01       	movw	r18, r22
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <main+0x15b6>
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	2a 95       	dec	r18
    20ee:	e2 f7       	brpl	.-8      	; 0x20e8 <main+0x15b2>
    20f0:	84 2b       	or	r24, r20
    20f2:	8c 93       	st	X, r24
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a6 e9       	ldi	r26, 0x96	; 150
    20fa:	b3 e4       	ldi	r27, 0x43	; 67
    20fc:	8b 87       	std	Y+11, r24	; 0x0b
    20fe:	9c 87       	std	Y+12, r25	; 0x0c
    2100:	ad 87       	std	Y+13, r26	; 0x0d
    2102:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	6b 85       	ldd	r22, Y+11	; 0x0b
    2106:	7c 85       	ldd	r23, Y+12	; 0x0c
    2108:	8d 85       	ldd	r24, Y+13	; 0x0d
    210a:	9e 85       	ldd	r25, Y+14	; 0x0e
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a e7       	ldi	r20, 0x7A	; 122
    2112:	53 e4       	ldi	r21, 0x43	; 67
    2114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8f 83       	std	Y+7, r24	; 0x07
    211e:	98 87       	std	Y+8, r25	; 0x08
    2120:	a9 87       	std	Y+9, r26	; 0x09
    2122:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <main+0x1610>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <main+0x168e>
	else if (__tmp > 65535)
    2146:	6f 81       	ldd	r22, Y+7	; 0x07
    2148:	78 85       	ldd	r23, Y+8	; 0x08
    214a:	89 85       	ldd	r24, Y+9	; 0x09
    214c:	9a 85       	ldd	r25, Y+10	; 0x0a
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <main+0x167a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2160:	7c 85       	ldd	r23, Y+12	; 0x0c
    2162:	8d 85       	ldd	r24, Y+13	; 0x0d
    2164:	9e 85       	ldd	r25, Y+14	; 0x0e
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <main+0x1670>
    2188:	89 e1       	ldi	r24, 0x19	; 25
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9c 83       	std	Y+4, r25	; 0x04
    218e:	8b 83       	std	Y+3, r24	; 0x03
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <main+0x165e>
    2198:	9c 83       	std	Y+4, r25	; 0x04
    219a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <main+0x1652>
    21ae:	14 c0       	rjmp	.+40     	; 0x21d8 <main+0x16a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	6f 81       	ldd	r22, Y+7	; 0x07
    21b2:	78 85       	ldd	r23, Y+8	; 0x08
    21b4:	89 85       	ldd	r24, Y+9	; 0x09
    21b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	9a 83       	std	Y+2, r25	; 0x02
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	9a 81       	ldd	r25, Y+2	; 0x02
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <main+0x169a>
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(300);
                CLR_BIT(PORTA, i);
    21d8:	ab e3       	ldi	r26, 0x3B	; 59
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	eb e3       	ldi	r30, 0x3B	; 59
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	48 2f       	mov	r20, r24
    21e4:	fe 01       	movw	r30, r28
    21e6:	e7 55       	subi	r30, 0x57	; 87
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 81       	ld	r24, Z
    21ec:	28 2f       	mov	r18, r24
    21ee:	33 27       	eor	r19, r19
    21f0:	27 fd       	sbrc	r18, 7
    21f2:	30 95       	com	r19
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <main+0x16c8>
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	2a 95       	dec	r18
    2200:	e2 f7       	brpl	.-8      	; 0x21fa <main+0x16c4>
    2202:	80 95       	com	r24
    2204:	84 23       	and	r24, r20
    2206:	8c 93       	st	X, r24
                CLR_BIT(PORTA, 7 - i);
    2208:	ab e3       	ldi	r26, 0x3B	; 59
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	eb e3       	ldi	r30, 0x3B	; 59
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	48 2f       	mov	r20, r24
    2214:	fe 01       	movw	r30, r28
    2216:	e7 55       	subi	r30, 0x57	; 87
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	28 2f       	mov	r18, r24
    221e:	33 27       	eor	r19, r19
    2220:	27 fd       	sbrc	r18, 7
    2222:	30 95       	com	r19
    2224:	87 e0       	ldi	r24, 0x07	; 7
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	fc 01       	movw	r30, r24
    222a:	e2 1b       	sub	r30, r18
    222c:	f3 0b       	sbc	r31, r19
    222e:	9f 01       	movw	r18, r30
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	02 2e       	mov	r0, r18
    2236:	02 c0       	rjmp	.+4      	; 0x223c <main+0x1706>
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	0a 94       	dec	r0
    223e:	e2 f7       	brpl	.-8      	; 0x2238 <main+0x1702>
    2240:	80 95       	com	r24
    2242:	84 23       	and	r24, r20
    2244:	8c 93       	st	X, r24
                _delay_ms(300);
                CLR_BIT(PORTA, i);
                CLR_BIT(PORTA, 7 - i);
            }

            for (s8 i = 2; i >= 1; i--)
    2246:	de 01       	movw	r26, r28
    2248:	a7 55       	subi	r26, 0x57	; 87
    224a:	bf 4f       	sbci	r27, 0xFF	; 255
    224c:	fe 01       	movw	r30, r28
    224e:	e7 55       	subi	r30, 0x57	; 87
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 81       	ld	r24, Z
    2254:	81 50       	subi	r24, 0x01	; 1
    2256:	8c 93       	st	X, r24
    2258:	fe 01       	movw	r30, r28
    225a:	e7 55       	subi	r30, 0x57	; 87
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 81       	ld	r24, Z
    2260:	18 16       	cp	r1, r24
    2262:	0c f4       	brge	.+2      	; 0x2266 <main+0x1730>
    2264:	13 cf       	rjmp	.-474    	; 0x208c <main+0x1556>
    2266:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <main+0x30>

0000226a <__prologue_saves__>:
    226a:	2f 92       	push	r2
    226c:	3f 92       	push	r3
    226e:	4f 92       	push	r4
    2270:	5f 92       	push	r5
    2272:	6f 92       	push	r6
    2274:	7f 92       	push	r7
    2276:	8f 92       	push	r8
    2278:	9f 92       	push	r9
    227a:	af 92       	push	r10
    227c:	bf 92       	push	r11
    227e:	cf 92       	push	r12
    2280:	df 92       	push	r13
    2282:	ef 92       	push	r14
    2284:	ff 92       	push	r15
    2286:	0f 93       	push	r16
    2288:	1f 93       	push	r17
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	ca 1b       	sub	r28, r26
    2294:	db 0b       	sbc	r29, r27
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	09 94       	ijmp

000022a2 <__epilogue_restores__>:
    22a2:	2a 88       	ldd	r2, Y+18	; 0x12
    22a4:	39 88       	ldd	r3, Y+17	; 0x11
    22a6:	48 88       	ldd	r4, Y+16	; 0x10
    22a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    22aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    22ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    22ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    22b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    22b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    22b4:	b9 84       	ldd	r11, Y+9	; 0x09
    22b6:	c8 84       	ldd	r12, Y+8	; 0x08
    22b8:	df 80       	ldd	r13, Y+7	; 0x07
    22ba:	ee 80       	ldd	r14, Y+6	; 0x06
    22bc:	fd 80       	ldd	r15, Y+5	; 0x05
    22be:	0c 81       	ldd	r16, Y+4	; 0x04
    22c0:	1b 81       	ldd	r17, Y+3	; 0x03
    22c2:	aa 81       	ldd	r26, Y+2	; 0x02
    22c4:	b9 81       	ldd	r27, Y+1	; 0x01
    22c6:	ce 0f       	add	r28, r30
    22c8:	d1 1d       	adc	r29, r1
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	ed 01       	movw	r28, r26
    22d6:	08 95       	ret

000022d8 <_exit>:
    22d8:	f8 94       	cli

000022da <__stop_program>:
    22da:	ff cf       	rjmp	.-2      	; 0x22da <__stop_program>
